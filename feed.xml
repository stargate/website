<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://stargate.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://stargate.io/" rel="alternate" type="text/html" /><updated>2022-10-05T16:54:09+00:00</updated><id>https://stargate.io/feed.xml</id><title type="html">Stargate</title><subtitle>An open source API framework for data.</subtitle><author><name></name></author><entry><title type="html">Stargate v2 Beta: Open for extension</title><link href="https://stargate.io/2022/09/11/stargate-v2-beta.html" rel="alternate" type="text/html" title="Stargate v2 Beta: Open for extension" /><published>2022-09-11T06:00:00+00:00</published><updated>2022-09-11T06:00:00+00:00</updated><id>https://stargate.io/2022/09/11/stargate-v2-beta</id><content type="html" xml:base="https://stargate.io/2022/09/11/stargate-v2-beta.html">&lt;p&gt;Last Friday, we released the first &lt;a href=&quot;https://github.com/stargate/stargate/releases/tag/v2.0.0-BETA-1&quot;&gt;Beta&lt;/a&gt; for Stargate v2. In this post we’ll look at why this is a major milestone for the project and how you can try out this new release yourself.&lt;/p&gt;

&lt;h2 id=&quot;what-is-stargate-v2&quot;&gt;What is Stargate v2?&lt;/h2&gt;

&lt;p&gt;To answer this question, let’s start with a quick refresher on the Stargate project. We like to refer to Stargate as a “data API gateway” (or data gateway for short) built on top of Apache Cassandra.&lt;/p&gt;

&lt;p&gt;In a technology world that is increasingly dominated by cloud data services rather than databases, application developers are likely to think in terms of data abstractions like JSON rather than an idiom unique to a particular database. An API gateway is therefore an ideal way to meet developers where they are, allowing them to work in frameworks and structures familiar to them without having to know all the particulars of the underlying database. Stargate is designed to meet this need – backed by the power of Cassandra, and presenting REST, Document, and GraphQL as developer friendly APIs. We’ve also added a set of gRPC libraries for doing CQL over gRPC as an easier, lightweight, and more cloud friendly alternative to native drivers for CQL.&lt;/p&gt;

&lt;p&gt;Stargate v2 represents a significant architectural update for our data API gateway, designed to address several opportunities for improvement we identified in working with the original architecture. In particular:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monolith to modular. The original Stargate codebase is too tightly coupled to the persistence engine, making it hard to develop anything without knowing everything. Going forward, we’re factoring out the REST, GraphQL and Document APIs as independent services. Enhancing a particular API service, or adding an entirely new API service, will be much easier, while CQL and gRPC APIs remain in the coordinator node for optimal performance.&lt;/li&gt;
  &lt;li&gt;Cloud friendly. Being more service-oriented is of course also more cloud friendly. We’ve created a new “bridge” gRPC API to the coordinator node that makes it easy to create additional API services. Supplying a HTTP-based API allows developers to extend the architecture more quickly compared to traditional the CQL binary protocol and drivers. We’re also moving away from OSGi as our containerization standard, and instead making each service deployable as its own Kubernetes pod. Kubernetes is the de facto standard for cloud deployments, and we’re happy to align with that. This will also improve compatibility with the cloud native version of Cassandra, namely &lt;a href=&quot;https://k8ssandra.io/&quot;&gt;K8ssandra&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Operator friendly. By leveraging Kubernetes, we can make each service independently deployable and scalable. This will give operators a lot more control over how they manage and scale Stargate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What hasn’t changed is our commitment to backward compatibility for all API endpoints. Additionally, Stargate v2 continues to support multiple Cassandra backends including Cassandra 3.11, Cassandra 4.0, and DataStax Enterprise 6.8. Stargate is also deployed as part of DataStax AstraDB, which provides important feedback on usage of Stargate at scale. To learn more about the Stargate v2 effort, check out our other blogs &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;announcing the project&lt;/a&gt; and discussing the &lt;a href=&quot;https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html&quot;&gt;design approach&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-its-time-to-release-a-beta&quot;&gt;Why it’s time to release a Beta&lt;/h2&gt;

&lt;p&gt;In our last update on Stargate v2, we &lt;a href=&quot;https://stargate.io/2022/01/06/reaching-the-first-milestone.html&quot;&gt;shared the progress&lt;/a&gt; on factoring the REST API out of the coordinator node as a separate microservice. Since that time we have created a new “Bridge” gRPC API distinct from the publicly available gRPC API and factored the GraphQL and Document API endpoints out of the coordinator into their own separate microservices. All three API services use the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus framework&lt;/a&gt;, which enables them to be very lightweight and leverage an up-to-date Java version - JDK 17.&lt;/p&gt;

&lt;p&gt;We are now getting close to a Release Candidate, and have a worthy Beta. This enables the open source community to start trying out Stargate v2 at near production quality in a couple of key areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Performance and scalability - we want to give you the opportunity to validate that performance continues to meet your expectations. It will also allow you to explore the new deployment and scaling possibilities of a specific API , deploying only the API services you actually need.&lt;/li&gt;
  &lt;li&gt;Extensibility - a key goal of Stargate v2 is the idea that the community should be able to add new API services &lt;a href=&quot;https://stargate.io/2022/05/23/towards-dynamodb-compatibility-for-cassandra.html&quot;&gt;more quickly and easily&lt;/a&gt;. The Bridge API exposed by the Coordinator services is really all that’s needed to add a new API service, and the source code for the REST, GraphQL, and Document API services provide instructive example code of what a finished API service should look like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Beta designation is our way of signaling that these facets of v2 are ready for full exploration and testing by the open source community.&lt;/p&gt;

&lt;h2 id=&quot;how-to-run-stargate-v2&quot;&gt;How to run Stargate v2&lt;/h2&gt;

&lt;p&gt;Now that we have a Beta release, why not give it a try? To make it easier to experiment with the release, we’ve built Docker images and provided Docker Compose scripts in order to spin up Stargate with a backing Cassandra or DSE cluster. The Docker images are available on our &lt;a href=&quot;https://hub.docker.com/u/stargateio&quot;&gt;Docker Hub&lt;/a&gt; page, but the easiest way to run is to clone the Stargate repo and use the scripts we’ve provided:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/stargate/stargate.git
cd stargate
git checkout v2.0.0
cd docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here, you’ll see three subdirectories: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-3.11&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra-4.0&lt;/code&gt;, and	&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dse-6.8&lt;/code&gt;. Depending on which Cassandra backend you wish to use, there are scripts available to start Stargate in Docker. Let’s look at Cassandra 4.0 as an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd cassandra-4.0
./start_cass_40_dev_mode.sh -t 2.0.0-BETA-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option defines which version to use, in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.0.0-BETA-1&lt;/code&gt;. We’ve provided these scripts that wrap Docker Compose to make it easier to impose the desired startup sequence. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_cass_40_dev_mode.sh&lt;/code&gt; script provides a simple configuration that starts a single instance of the REST and GraphQL APIs and a single instance of the Stargate coordinator in “developer mode”, meaning that the coordinator is running a full Cassandra 4.0 node. Developer mode is a feature that many Stargate users don’t know about but it’s a great option for simple testing. If you’d like to run with a 3-node Cassandra cluster instead, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_cass_40.sh&lt;/code&gt; script, again using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option to specify the desired release.&lt;/p&gt;

&lt;p&gt;Once you have a cluster running, it’s a simple matter to generate some test queries against your running instance. The easiest way to do this is to use our recently updated Postman collections. There are three collections available: REST, GraphQL and Docs API. Once you have Postman installed, you can load the collections from the &lt;a href=&quot;https://www.postman.com/datastax/workspace/datastax-astra-db-stargate/overview&quot;&gt;DataStax workspace&lt;/a&gt; on the Postman website. See the Stargate &lt;a href=&quot;https://stargate.io/docs/latest/develop/tooling.html&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;For example, let’s try running the REST collection against our local Stargate v2 cluster. After loading the collections, make sure to select the “Stargate OSS API Environment” from the pulldown at the upper right (1). This configures settings that will cause Postman to talk to endpoints on your local computer using the default port number. Then select the “Stargate-OSS-Astra-REST-API” collection from the list on the left (2) and run the collection (3).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stargate-v2-postman.png&quot; alt=&quot;postman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can sit back and watch as Postman uses Stargate’s authentication API to generate a token and use that token to securely invoke operations against your local copy of the Stargate REST API. Try out the other collections as well and let us know what you think.&lt;/p&gt;

&lt;h2 id=&quot;we-want-your-feedback&quot;&gt;We want your feedback&lt;/h2&gt;

&lt;p&gt;What’s next? In the coming weeks we’ll continue to generate additional Beta releases based on your feedback. We will especially want feedback when we’ve reached what we consider to be a Release Candidate.&lt;/p&gt;

&lt;p&gt;You can provide feedback through whatever channel is easiest for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We do our work out in the open, so &lt;a href=&quot;https://github.com/stargate/stargate&quot;&gt;Github&lt;/a&gt; is a great place to provide feedback, and we use &lt;a href=&quot;https://github.com/stargate/stargate/discussions&quot;&gt;Github Discussions&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;We also have a &lt;a href=&quot;https://discord.gg/33mKDHHFUE&quot;&gt;Discord server&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Or find us on &lt;a href=&quot;https://twitter.com/stargateio&quot;&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Or &lt;a href=&quot;https://www.linkedin.com/groups/9091327/?lipi=urn%3Ali%3Apage%3Ad_flagship3_groups_index%3BiWk36RDvQXmdJSCjsT5YlQ%3D%3D&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Last Friday, we released the first Beta for Stargate v2. In this post we’ll look at why this is a major milestone for the project and how you can try out this new release yourself.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate: Towards DynamoDB Compatibility for Cassandra (Part 2)</title><link href="https://stargate.io/2022/05/31/towards-dynamodb-compatibility-for-cassandra-part-2.html" rel="alternate" type="text/html" title="Stargate: Towards DynamoDB Compatibility for Cassandra (Part 2)" /><published>2022-05-31T06:00:00+00:00</published><updated>2022-05-31T06:00:00+00:00</updated><id>https://stargate.io/2022/05/31/towards-dynamodb-compatibility-for-cassandra-part-2</id><content type="html" xml:base="https://stargate.io/2022/05/31/towards-dynamodb-compatibility-for-cassandra-part-2.html">&lt;p&gt;In my &lt;a href=&quot;/2022/05/23/towards-dynamodb-compatibility-for-cassandra.html&quot;&gt;previous blog post&lt;/a&gt;, I introduced the Dynamo API Service, which is our project to make Apache Cassandra&lt;sup&gt;Ⓡ&lt;/sup&gt; compatible with Amazon DynamoDB by building a middleware. In this blog post, I will share a few interesting challenges we encountered and how we tackled them.&lt;/p&gt;

&lt;h2 id=&quot;how-to-authenticate&quot;&gt;How to authenticate?&lt;/h2&gt;

&lt;p&gt;This is the first problem we encountered. InDynamoDB (and many other AWS products), there are multiple ways to authenticate, among which a common way is to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environmental variables.&lt;/p&gt;

&lt;p&gt;Usually, you don’t need to worry about authentication after you have your Dynamo DB credentials set up. Stargate, on the other hand, requires you to provide a &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/authnz.html&quot;&gt;token&lt;/a&gt; in every request you make. We could let users follow the authentication guide and fetch their token either manually or programmatically, but the problem was how to make the DynamoDB client aware of this token and carry the token every time it makes an HTTP request. Of course, we could rewrite the DynamoDB client by ourselves, but we would like to avoid that if possible so that users don’t need to change their client library.&lt;/p&gt;

&lt;p&gt;Luckily, we found a trick to tackle this problem. We found out that the DynamoDB client always puts an authorization header that contains an unencrypted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; in every HTTP request it makes. This makes sense because a DynamoDB client has to use the HTTP protocol to authenticate itself with the DynamoDB server. Now, in the Dynamo API Service for Stargate, we can easily read the token from this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; field. Problem solved. All the user needs to do is to put the Stargate token into their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; environment variable, and then they don’t need to worry about authentication while making requests!&lt;/p&gt;

&lt;h2 id=&quot;the-discrepancy-in-data-types&quot;&gt;The discrepancy in data types&lt;/h2&gt;

&lt;p&gt;Cassandra and DynamoDB have similar data models but they are not exactly the same. There is one-to-one mapping for basic types but not for the map, list, and set data types in DynamoDB. In DynamoDB, maps, lists, and sets can be deeply nested, meaning that you can have a list of maps of sets or even more complicated data structures. For example, you could insert an item whose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goods&lt;/code&gt; attribute contains:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
 {
   &quot;name&quot;: &quot;apple&quot;,
   &quot;price&quot;: 4,
   &quot;images&quot;: [
     &quot;apple1.jpg&quot;,
     &quot;apple2.jpg&quot;
   ]
 },
 {
   &quot;name&quot;: &quot;orange&quot;,
   &quot;price&quot;: 1.45,
   &quot;images&quot;: &quot;orange.jpg&quot;
 }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the above data structure is a list of maps. Furthermore, the first map in the list contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; as a list, while the second map in the list contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; as a string. This heterogeneity might not be common in the real world but it is undoubtedly allowed as DynamoDB is schemaless. Cassandra, despite its support for nested collections, enforces a schema. For example, if you create a column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goods&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;goods list&amp;lt;frozen&amp;lt;map&amp;lt;text,text&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then everything in the inner map must be of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; datatype. The Cassandra native support fails this use case.&lt;/p&gt;

&lt;p&gt;We don’t really know how nested collections are stored in DynamoDB (recall it’s not open-sourced!). But one (good) thing we know is that you can only create indices for top-level attributes with basic data types. In the previous example, you cannot index the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; field because it’s a nested attribute under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goods&lt;/code&gt; which is a top-level attribute. What does this mean for us? This means we can treat the whole nested collection as a BLOB (binary format) without sacrificing the ability to index.&lt;/p&gt;

&lt;p&gt;In all, what we do is quite simple: whenever the user writes a collection data entry, we serialize it into a sequence of bytes and store it in Cassandra. Whenever the user needs to read it, we deserialize the collection from the sequence of bytes stored in Cassandra. And it works just fine! Right now we are using the &lt;a href=&quot;https://github.com/EsotericSoftware/kryo&quot;&gt;Kryo&lt;/a&gt; library for serialization and deserialization, but we might write our own methods for better performance in the future.&lt;/p&gt;

&lt;h2 id=&quot;parser-is-all-you-need&quot;&gt;Parser is all you need&lt;/h2&gt;

&lt;p&gt;If you are building a database, then you almost certainly need to write parsers to parse the queries. DynamoDB, at the first glance, seemed to be an exception because it uses JSON as a request payload — there are so many JSON libraries that can help us with the parsing (deserialization). This seems to suggest we don’t need to worry about writing parsers. Unfortunately, this is not actually the case. DynamoDB queries have fields like &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-FilterExpression&quot;&gt;&lt;code&gt;FilterExpression&lt;/code&gt;&lt;/a&gt; that allow users to define certain conditions in plain text format. For example, in a query, you can have a filter expression like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(Debt = :debt OR Deposit &amp;lt;&amp;gt; :deposit) AND Sex = :s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the results are filtered out if they don’t satisfy the above expression. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilterExpression&lt;/code&gt; supports different comparison operators and can be nested. You might think about using a regular expression to match the above text, but it is not feasible because &lt;a href=&quot;https://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns&quot;&gt;REGEX generally cannot handle nested expressions&lt;/a&gt;. We actually tried writing regular expressions for simpler cases, but the code quickly turned obscure and we had to give up.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&quot;https://www.antlr.org/&quot;&gt;ANTLR&lt;/a&gt; comes into play. ANTLR is a popular and powerful parser generator. By simply defining grammars, ANTLR helps us generate Java code that can parse the expressions into abstract parse trees. We then write code that visits the abstract parse tree and evaluates the expression. With the help of ANTLR, we keep our code concise and easy to maintain. It might be a bit challenging at the beginning to write clean grammar if you are not familiar with compiler knowledge, but it pays off!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This concludes our journey toward completion of our capstone project for our Spring semester in the &lt;a href=&quot;https://mcds.cs.cmu.edu/&quot;&gt;Master of Computational Data Science&lt;/a&gt; (MCDS) program at Carnegie Mellon University (CMU). I would like to thank DataStax for the help and guidance throughout this journey. We will continue working on the project in the Fall semester to complete the rest of the APIs and do a thorough performance benchmark. Our hope is to deliver a complete product in the end!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to all the members of the Stargate community who supported this effort including Prabhat Jha, Sebastian Estevez, Tatu Saloranta, and Jeff Carpenter.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In my previous blog post, I introduced the Dynamo API Service, which is our project to make Apache CassandraⓇ compatible with Amazon DynamoDB by building a middleware. In this blog post, I will share a few interesting challenges we encountered and how we tackled them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate: Towards DynamoDB Compatibility for Cassandra (Part 1)</title><link href="https://stargate.io/2022/05/23/towards-dynamodb-compatibility-for-cassandra.html" rel="alternate" type="text/html" title="Stargate: Towards DynamoDB Compatibility for Cassandra (Part 1)" /><published>2022-05-23T06:00:00+00:00</published><updated>2022-05-23T06:00:00+00:00</updated><id>https://stargate.io/2022/05/23/towards-dynamodb-compatibility-for-cassandra</id><content type="html" xml:base="https://stargate.io/2022/05/23/towards-dynamodb-compatibility-for-cassandra.html">&lt;p&gt;To fulfill my capstone project requirement for the Carnegie Mellon University (CMU) &lt;a href=&quot;https://mcds.cs.cmu.edu/&quot;&gt;Master of Computational Data Science&lt;/a&gt; (MCDS) program, I and two of my classmates, Ziyan Zhang and Xiang Yue, collaborated with &lt;a href=&quot;https://datastax.com/&quot;&gt;DataStax&lt;/a&gt; to develop a new module in the &lt;a href=&quot;http://stargate.io/&quot;&gt;Stargate&lt;/a&gt; system to bring Amazon &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;DynamoDB&lt;/a&gt; compatibility to &lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;Apache Cassandra&lt;/a&gt;.&lt;sup&gt;Ⓡ&lt;/sup&gt; I will introduce our journey in two blog posts. Here in Part 1, I will provide some background on the project and describe the overall design of our system. In &lt;a href=&quot;/2022/05/31/towards-dynamodb-compatibility-for-cassandra-part-2.html&quot;&gt;Part 2&lt;/a&gt;, I will discuss some interesting challenges we encountered and how we solved them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/towards-dynamodb-compatibility-for-cassandra/stargate-dynamodb-compatibility.png&quot; alt=&quot;DynamoDB Compatibility for Cassandra&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cassandra-vs-dynamodb&quot;&gt;Cassandra vs. DynamoDB&lt;/h2&gt;

&lt;p&gt;Cassandra and DynamoDB are two popular NoSQL databases inspired by Google’s &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&quot;&gt;BigTable&lt;/a&gt; and Amazon’s &lt;a href=&quot;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;Dynamo&lt;/a&gt; papers. They have many similarities but I think it is more useful to look at some of their biggest differences:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cassandra is completely free, while DynamoDB is commercial. As a free product, Cassandra can be deployed either on-premise or in the cloud (private, public, or hybrid). For enterprise users, companies like DataStax have cloud offerings and enterprise support for Cassandra. In contrast, despite having a free-tier service, DynamoDB is a commercial and proprietary product, meaning that you have a vendor lock-in problem once you decide to use it. That is, you can only use DynamoDB in AWS but not in your private cloud or any other public cloud. You don’t have much choice if you begin to feel unsatisfied with the pricing or service because the migration cost would be too high.&lt;/li&gt;
  &lt;li&gt;Apache Cassandra is open-source, while Amazon DynamoDB is closed-source. The advantages of open-source products have been widely discussed so I’ll save you some time here. From my personal experience, the biggest advantage of open-source is the ability to make tailor-made changes, and the biggest disadvantage of closed-source is the black-box nature of system behavior — there are always things that are not documented.&lt;/li&gt;
  &lt;li&gt;Cassandra enforces schema while DynamoDB is schemaless. Schemaless might be convenient and flexible for developers, but developers often still need to have some sort of schema on the application side for software engineering reasons.&lt;/li&gt;
  &lt;li&gt;Both databases have their own query languages. Cassandra uses &lt;a href=&quot;https://cassandra.apache.org/doc/latest/cassandra/cql/&quot;&gt;Cassandra Query Language&lt;/a&gt; (CQL), which is a variant of SQL, while DynamoDB (low-level API) uses JSON as a request payload.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many more differences, but the first two illustrate why it might be a good idea to use Cassandra instead of DynamoDB, and the last two point to the potential difficulties in switching to Cassandra if you decide to use DynamoDB and later regret that choice. For users that are already using DynamoDB or already have expertise in using DynamoDB, switching from DynamoDB to Cassandra might be too costly.&lt;/p&gt;

&lt;h2 id=&quot;how-stargate-provides-dynamodb-compatibility&quot;&gt;How Stargate provides DynamoDB compatibility&lt;/h2&gt;

&lt;p&gt;It is difficult for users that are already using and/or are familiar with DynamoDB to switch to Cassandra, so why don’t we make Cassandra compatible with DynamoDB? Wouldn’t it be nice for users to be able to switch from DynamoDB to Cassandra without having to change a single line of their existing codebase if they want to? Bingo! That’s what our project is for. Basically, we leverage a third framework called “Stargate” to build a middleware for Cassandra that is compatible with DynamoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt; is an open source data gateway that sits between your app and your databases.&lt;/p&gt;

&lt;p&gt;Stargate is an open-source middleware that sits on top of a database, e.g. Apache Cassandra. It abstracts Cassandra-specific concepts entirely from app developers and supports different API options, removing barriers of entry for new software developers. Right now, Stargate supports &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/quickstart/quick_start-rest.html&quot;&gt;REST API&lt;/a&gt;, &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/quickstart/quick_start-document.html&quot;&gt;Document API&lt;/a&gt;, &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/gRPC.html&quot;&gt;gRPC API&lt;/a&gt;, and &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/quickstart/quick_start-graphql.html&quot;&gt;GraphQL API&lt;/a&gt;. These different API options are pluggable and can be installed when needed.&lt;/p&gt;

&lt;h2 id=&quot;stargate-architecture&quot;&gt;Stargate Architecture&lt;/h2&gt;

&lt;p&gt;The figure below shows the Stargate (v2) architecture. As described in &lt;a href=&quot;https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html&quot;&gt;this&lt;/a&gt; blog post, Stargate (v2) is highly modular. There are already many services that provide different kinds of APIs. Our goal was to create a new service that provides a DynamoDB API. We wanted this API to be able to understand DynamoDB queries and transform them into Cassandra queries and for users to be able to continue using their existing DynamoDB client code to interact seamlessly with Cassandra.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/towards-dynamodb-compatibility-for-cassandra/stargate-v2-dynamodb.png&quot; alt=&quot;DynamoDB API Service in Stargate V2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-does-a-query-workflow-look-like&quot;&gt;What does a query workflow look like&lt;/h2&gt;

&lt;p&gt;We didn’t want users to have to change a single line of code when switching to Cassandra. But wait a minute…how is that ever possible given Cassandra and DynamoDB have different client libraries? The answer is simple: DynamoDB clients talk to DynamoDB servers in HTTP protocol.&lt;/p&gt;

&lt;p&gt;By implementing a web service on top of Cassandra that behaves in the same way as the DynamoDB server, DynamoDB clients could continue to work without knowing it is actually talking to Cassandra. We implemented such a service as a new module in Stargate - the Dynamo API Service. A typical workflow is shown in the following diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/towards-dynamodb-compatibility-for-cassandra/stargate-dynamodb-query.png&quot; alt=&quot;Sequence Diagram for PutItem API&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sequence-diagram-for-putitem-api&quot;&gt;Sequence diagram for PutItem API&lt;/h2&gt;

&lt;p&gt;The sequence diagram above shows the workflow for DynamoDB &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html&quot;&gt;PutItem API&lt;/a&gt;. Let’s ignore the first component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthResource&lt;/code&gt; for now — all we need to know is that it helps with authentication. By using the DynamoDB client to put an item into the database, the client would send an HTTP request to the configured DynamoDB server endpoint. To use our system, users just need to change their endpoint from AWS to our service. It’s just one line of configuration change! Then everything is handled by our service and Cassandra.&lt;/p&gt;

&lt;p&gt;Let’s get back to the sequence diagram. After receiving an HTTP request, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamoResource&lt;/code&gt;, our REST API controller, will recognize the type of request, deserialize the parameters, and then dispatch them to an appropriate Proxy class, in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemProxy&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemProxy&lt;/code&gt; component takes the main responsibility of handling the request. Specifically, it needs to parse the request and transform it into a Stargate intermediate representation. You may ask, why an intermediate representation and not a Cassandra query directly? As we said earlier, Stargate is a middleware that sits on top of your database. Although the database we are using is Cassandra, it could be any other database as long as Stargate supports it.&lt;/p&gt;

&lt;p&gt;By transforming DynamoDB request into Stargate intermediate representation, we leverage the Cassandra adapter that is already implemented by Stargate. After transforming the request to Stargate intermediate representation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemProxy&lt;/code&gt; sends it to the Stargate coordinator via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateBridgeClient&lt;/code&gt; which is essentially a gRPC client. The Stargate coordinator then talks to Cassandra nodes and returns the results back.&lt;/p&gt;

&lt;p&gt;Note that some requests are straightforward and only need one round-trip between Proxy — Stargate Coordinator — Cassandra cluster. Other requests are more complicated and may need multiple roundtrips. In the PutItem example shown in the sequence diagram, three round trips, at most, are needed. How come we need three round trips for a single write operation? That’s due to the schema difference between Cassandra and DynamoDB. Remember that in the beginning, we said DynamoDB is schemaless while Cassandra is not? That means you could insert an item to DynamoDB with new columns without pre-defining the schema (actually you cannot define a schema in DynamoDB), while you couldn’t do the same for Cassandra.&lt;/p&gt;

&lt;p&gt;In Cassandra, if a write operation contains columns that are unknown, the request fails. Therefore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemProxy&lt;/code&gt; needs to first check whether the schema needs to be updated and if so, it must update the schema first before actually persisting the data. This sounds very slow, isn’t it? Luckily, Stargate has a caching mechanism, and most of the time, the schema will be cached and the overhead is small unless new columns appear frequently. \&lt;/p&gt;

&lt;p&gt;Now that you understand our motivation and the basic design for our service, stay tuned for our next blog in which I will talk about some interesting challenges we encountered and how we solved them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to all the members of the Stargate community who supported this effort including Prabhat Jha, Sebastian Estevez, Tatu Saloranta, and Jeff Carpenter.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">To fulfill my capstone project requirement for the Carnegie Mellon University (CMU) Master of Computational Data Science (MCDS) program, I and two of my classmates, Ziyan Zhang and Xiang Yue, collaborated with DataStax to develop a new module in the Stargate system to bring Amazon DynamoDB compatibility to Apache Cassandra.Ⓡ I will introduce our journey in two blog posts. Here in Part 1, I will provide some background on the project and describe the overall design of our system. In Part 2, I will discuss some interesting challenges we encountered and how we solved them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate gRPC: The Better Way to CQL</title><link href="https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql.html" rel="alternate" type="text/html" title="Stargate gRPC: The Better Way to CQL" /><published>2022-01-15T06:00:00+00:00</published><updated>2022-01-15T06:00:00+00:00</updated><id>https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql</id><content type="html" xml:base="https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql.html">&lt;h1 id=&quot;stargate-grpc-the-better-way-to-cql&quot;&gt;&lt;strong&gt;Stargate gRPC: The Better Way to CQL&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/data-cloud.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stargate’s new gRPC API is so much more than just a feature release — it’s your official welcome to the “no drivers” future of Apache Cassandra.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently, we &lt;a href=&quot;https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java&quot;&gt;released gRPC as the newest API&lt;/a&gt; supported by &lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt;, our API data gateway. On the surface, it would seem like the API doesn’t do very much; it receives CQL queries via the gRPC protocol, then passes those to &lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;Apache Cassandra®&lt;/a&gt; and returns the results. Sounds like a pretty modest feature release, right?&lt;/p&gt;

&lt;p&gt;In reality, what the Stargate team has delivered is groundbreaking. Not quite a native driver and not quite a simple HTTP-based API, Stargate’s gRPC implementation represents a fundamentally new approach for applications interacting with Cassandra — an approach that’s more cloud native than any driver, and more performant than any simple HTTP-based API.&lt;/p&gt;

&lt;p&gt;So let me tell you why this approach is so important, and why this is such a revolutionary solution for a common developer problem.&lt;/p&gt;

&lt;h2 id=&quot;native-drivers-are-not-cloud-friendly&quot;&gt;Native drivers are not cloud friendly&lt;/h2&gt;

&lt;p&gt;Functionality inside a native driver can be divided into two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The query engine.&lt;/strong&gt; This issues requests in a particular query language for a particular database, and receives responses to those requests that can then be used in application code. In our case, the query language is CQL, and the database is Cassandra.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operational management.&lt;/strong&gt; This includes tasks like connection pooling, TLS, authentication, load balancing, retry policies, write coalescing, compression, health checks, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll notice that most of those operational tasks are abstracted away from applications in cloud environments, and simply handled automatically on behalf of the application. For example, load balancing, health checks, and TLS termination are intrinsic to most cloud environments; even retries can be configured within the environment.&lt;/p&gt;

&lt;p&gt;Put another way: in a well-designed microservices environment, network management tasks should live inside a service boundary and execute within an SLA defined in a service contract. There should be no need, and it would be a violation of microservices principles for an application to want to reach across that boundary and directly manipulate those operational tasks.&lt;/p&gt;

&lt;p&gt;And yet, this is exactly what native drivers do.&lt;/p&gt;

&lt;p&gt;This is not a mere architectural nicety. Building native drivers into an otherwise cloud-native, microservice-oriented application has real and negative consequences. Let’s dig a little deeper into why.&lt;/p&gt;

&lt;p&gt;Native protocol drivers are expensive to maintain and require reimplementing the same complex functionality for different platforms (like Java, Go, Node, Rust). All that operational management forces developers to extend their skill set from application development in their preferred language to areas of systems operation, thus steepening the learning curve for native drivers.&lt;/p&gt;

&lt;p&gt;More significantly, this co-mingling of concerns opens up a new vector that could trigger the need for a driver update. A configuration change in the network environment, for example, could require an update to the way every driver handles load balancing or connection pooling. Now your organization has to stop every application instance using that driver, apply the change within the driver, and restart all those application instances. Depending on the nature of the driver change, some changes in the rest of the application may also be required.&lt;/p&gt;

&lt;p&gt;They also inject surprising brittleness into applications because of the network management overhead required, making it more likely that drivers, and therefore applications that use them, must be updated.&lt;/p&gt;

&lt;p&gt;In sum, native drivers are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complex and present a steep learning curve&lt;/li&gt;
  &lt;li&gt;Hard to update and maintain&lt;/li&gt;
  &lt;li&gt;Speed bumps for developer velocity&lt;/li&gt;
  &lt;li&gt;A threat to application resilience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can safely say that native drivers are fast, which makes it easy to overemphasize raw performance, but the overall picture of performance and resilience is much more complicated.&lt;/p&gt;

&lt;h2 id=&quot;http-based-apis-are-a-performance-trade-off&quot;&gt;HTTP-based APIs are a performance trade-off&lt;/h2&gt;

&lt;p&gt;The modern approach to application development is, in part, a rebellion against the burden of native drivers. Today’s application developers, particularly front end developers, are expected to interact with data through an HTTP-based API and rely on JSON as the primary method of structuring data.&lt;/p&gt;

&lt;p&gt;We fully support this API-based approach on Stargate. This has several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Language agnosticism.&lt;/strong&gt; Applications can be written in any language that can talk to an HTTP endpoint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Separation of concerns&lt;/strong&gt; between application environment and infrastructure environment. Precisely as should happen in a cloud-native context, all of the network management and operational overhead lives behind the API. Changes and updates there stay contained within that service boundary, removing this as an area of concern for application logic.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resilience.&lt;/strong&gt; The statelessness of HTTP constrains application design to avoid reliance on durable network connections, meaning applications designed in this manner are more resilient against the vagaries of network behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unsurprisingly, HTTP-based APIs have become the backbone of microservice applications for a cloud-native environment. But these benefits are not free. HTTP-based APIs are a slower way to query a database, for two reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt; -  Native drivers talk “closer to the wire,” which significantly improves performance. The Java driver for CQL, for example, operates at Layer 5, whereas HTTP operates at Layer 7.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data transformation&lt;/strong&gt; - Databases don’t store JSON natively (even MongoDB relies on the WiredTiger storage engine when you drill down far enough). So some transformation has to happen to turn a JSON-oriented query into a native database query (CQL, in the case of Cassandra). The compute overhead of performing this transformation further slows performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And now, we have a dilemma. On one hand, HTTP-based APIs offer simplicity and language agnosticism that accelerates developer velocity, while also offering a separation of concerns between application and infrastructure that improves application resilience. To put it simply, HTTP-based APIs are good cloud citizens, presenting and abiding by clear service boundaries.&lt;/p&gt;

&lt;p&gt;On the other hand, while native drivers are a burden to developers and co-mingled concerns between development and operations negatively impact resilience, native drivers are just flat out more performant than HTTP-based APIs.&lt;/p&gt;

&lt;p&gt;So, what to do?&lt;/p&gt;

&lt;h2 id=&quot;decomposing-the-driver&quot;&gt;Decomposing the driver&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt; supports native driver calls, offering a CQL API through which to talk to Cassandra. This is essentially just a transparent proxy, and so CQL calls via Stargate remain highly performant. Let’s look at a simple architecture diagram of this part of Stargate. (See Figure 1.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 1: Simple Architecture of Native Driver and Stargate.&lt;/p&gt;

&lt;p&gt;The fundamental problem is the co-mingling of concerns. Some of what lives inside the native driver should, in a cloud-native context, live behind an API and thus inside the API’s service boundary. So what if we looked at it this way instead? (See Figure 2.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 2: Decomposing the driver.&lt;/p&gt;

&lt;p&gt;The real challenge is how to move that box that says “Network Management Tasks” across the service boundary into Stargate and behind an API. We’ll also have to do it in a way that honors the language agnosticism of APIs. Without that agnosticism, we have to maintain a different “box” of network management tasks for each language, even though those tasks are essentially the same across languages. We’d lighten the driver but make Stargate harder to maintain, and a good bit less cloud friendly.&lt;/p&gt;

&lt;h2 id=&quot;enter-grpc&quot;&gt;Enter gRPC&lt;/h2&gt;

&lt;p&gt;In 2008, Google developed, open-sourced and released &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protocol Buffers&lt;/a&gt; — a language-neutral mechanism for serializing structured data. In 2015, Google released &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; (also open source) to incorporate Protocol Buffers into work to modernize Remote Procedure Call (RPC).&lt;/p&gt;

&lt;p&gt;gRPC has a couple of important performance characteristics. One is the improved data serialization, making data transit over the network much more efficient. The other is the use of HTTP/2, which enables bidirectional communication. As a result, there are four call types supported in gRPC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unary calls&lt;/li&gt;
  &lt;li&gt;Client side streaming calls&lt;/li&gt;
  &lt;li&gt;Server side streaming calls&lt;/li&gt;
  &lt;li&gt;Bidirectional calls, which are a composite of client side and server side streaming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put all this together and you have a mechanism that is fast — &lt;em&gt;very&lt;/em&gt; fast when compared to other HTTP-based APIs. gRPC message transmission can be &lt;a href=&quot;https://blog.dreamfactory.com/grpc-vs-rest-how-does-grpc-compare-with-traditional-rest-apis/&quot;&gt;7x to 10x faster&lt;/a&gt; than traditional REST APIs. In other words, a solution based on gRPC could offer performance comparable to native drivers.&lt;/p&gt;

&lt;h2 id=&quot;stargate-grpc&quot;&gt;Stargate gRPC&lt;/h2&gt;

&lt;p&gt;When you pull all of the network management tasks out of a driver, what you’re left with is a thin client library containing little more than the query engine. In our case, these CQL queries transit to a Stargate API endpoint via gRPC. (See Figure 3.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 3: Stargate’s gRPC Implementation.&lt;/p&gt;

&lt;p&gt;Behind that endpoint is what amounts to a CQL driver written in gRPC. In other words, it receives CQL calls on the API endpoint via gRPC, and then makes direct CQL calls to Cassandra. No data transformation is required, because we’re using CQL end to end.&lt;/p&gt;

&lt;p&gt;These client libraries are dramatically easier to write and maintain. Our original intent was to launch with client libraries for Java and for Go, since these are our two most requested languages. As it happened, adding new languages was so easy that we also included client libraries for Node.js and Rust.&lt;/p&gt;

&lt;p&gt;These four — and perhaps more languages in the future -— represent a fully DataStax-supported way to make CQL calls from your application. We’ll continue to support our existing native drivers, and in those languages the gRPC client libraries represent an additional, supported alternative. For languages like Go where DataStax does not have a supported native driver, the supported gRPC client library is now a great way to go.&lt;/p&gt;

&lt;h2 id=&quot;do-more-with-stargate-grpc&quot;&gt;Do more with Stargate gRPC&lt;/h2&gt;

&lt;p&gt;If your favorite language is not on our list, extending to a new language is not hard. From a protobuf file you get a skeleton of the CQL calls you need to make in your chosen language, and none of the operational overhead is required. You get that out of the box with gRPC, and it lives inside of Stargate where it belongs in a proper cloud-native context.&lt;/p&gt;

&lt;p&gt;Thanks to bidirectionality and efficient data serialization, you’ll now get performance on par with native drivers combined with the simplicity of a thin client library, all within a context that plays nicely with the rest of your microservices.&lt;/p&gt;

&lt;p&gt;To learn more, head over to &lt;a href=&quot;https://github.com/stargate&quot;&gt;Stargate’s Github&lt;/a&gt;. You can also find source code and examples on &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/gRPC-using.html&quot;&gt;using Stargate gRPC API clients&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-java-client&quot;&gt;Java client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-go-client&quot;&gt;Go client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-node-client&quot;&gt;Node.js client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-rust-client&quot;&gt;Rust client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, lastly, welcome to the “No Drivers” future of Apache Cassandra.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate&quot;&gt;Stargate - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/gRPC-using.html&quot;&gt;Using Stargate gRPC API clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java&quot;&gt;Native Driver Alternatives Using Stargate gRPC API in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Stargate gRPC: The Better Way to CQL</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate v2 Update: Reaching the First Milestone</title><link href="https://stargate.io/2022/01/06/reaching-the-first-milestone.html" rel="alternate" type="text/html" title="Stargate v2 Update: Reaching the First Milestone" /><published>2022-01-06T06:00:00+00:00</published><updated>2022-01-06T06:00:00+00:00</updated><id>https://stargate.io/2022/01/06/reaching-the-first-milestone</id><content type="html" xml:base="https://stargate.io/2022/01/06/reaching-the-first-milestone.html">&lt;h1 id=&quot;stargate-v2-update-reaching-the-first-milestone&quot;&gt;Stargate v2 Update: Reaching the First Milestone&lt;/h1&gt;

&lt;p&gt;Back in November, we shared the goals of the &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;Stargate v2 release&lt;/a&gt; and our &lt;a href=&quot;https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html&quot;&gt;proposed design approach&lt;/a&gt;, and now it’s time for a progress check. To kick off 2022, the Stargate team is excited to provide an update on our first milestone in the continued development of Stargate v2.&lt;/p&gt;

&lt;p&gt;For this first milestone, we adopted a “steel thread” approach – our goal was to begin &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;breaking up the monolith&lt;/a&gt; by factoring a single API service out of the Stargate coordinator node – the REST API service. While the original v2 design referenced above includes the introduction of a new gRPC “Bridge” component, we elected to use the new gRPC API that was released in November 2021 as a placeholder for the Bridge in this first milestone, and defer starting work on the Bridge to the next milestone. This enabled us to work more quickly and focus on separating out the new service from the Coordinator Node. The result of what we built is shown in Figure 1 below:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/steel-thread-image.png&quot; alt=&quot;Figure 1: Summary of Stargate v2 Milestone 1 implementation.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 1: Summary of Stargate v2 Milestone 1 implementation.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can find our work on the new standalone REST API service on the &lt;a href=&quot;https://github.com/stargate/stargate/tree/v2.0.0&quot;&gt;v2.0.0 branch&lt;/a&gt; in the &lt;a href=&quot;https://github.com/stargate/stargate/tree/v2.0.0/sgv2-restapi&quot;&gt;sgv2-restapi module&lt;/a&gt;. While the new REST API service is not production-ready, at the time of writing it is passing over 90% of the integration tests for the REST v2 endpoints. In fact, the easiest way to see the new endpoint in action is to check out the v2.0.0 branch and run the integration test suite as described in the project &lt;a href=&quot;https://github.com/stargate/stargate/blob/v2.0.0/README.md&quot;&gt;README&lt;/a&gt;. We’re also working on ”Dockerizing” this configuration as well.&lt;/p&gt;

&lt;p&gt;We had some interesting learnings and design discussions that came up along the way. We captured a bunch of them in our retrospective, and then did some affinity mapping to identify common themes. In the sections below, we’ll cover some of the key points that emerged from this exercise.&lt;/p&gt;

&lt;h2 id=&quot;open-discussions&quot;&gt;Open discussions&lt;/h2&gt;

&lt;p&gt;One of our main goals for Stargate v2 has been to make it easier for new contributors to get involved. To help move things in that direction, we’ve started documenting design discussions and proposals via &lt;a href=&quot;https://github.com/stargate/stargate/discussions&quot;&gt;GitHub discussions&lt;/a&gt; instead of private Google docs so that the community can benefit and participate. In fact, we’ll link to some of those discussions in the sections below.&lt;/p&gt;

&lt;h2 id=&quot;rest-api-observations&quot;&gt;REST API observations&lt;/h2&gt;

&lt;p&gt;As we were planning Stargate v2, we decided to focus on the architectural refactoring over making improvements to the existing APIs, in order to move quickly and in order to preserve backward compatibility. However, as we worked to make sure the new REST API service worked the same as the existing Stargate v1 REST endpoint, we actually found a few defects and improvements, which we have been documenting in a &lt;a href=&quot;https://github.com/stargate/stargate/discussions/1501&quot;&gt;GitHub discussion&lt;/a&gt; and making equivalent fixes for both Stargate v1 and v2.&lt;/p&gt;

&lt;p&gt;As noted above, we have completed the implementation of the majority of the “REST v2” endpoints (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2/keyspaces…&lt;/code&gt;) in the new REST API Service. We did not prioritize implementation of the “REST v1” endpoints (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v1/keyspaces/…&lt;/code&gt;) and are investigating how widely used the v1 endpoints are in order to determine the level of interest in bringing those endpoints forward into Stargate v2. Please reach out on the &lt;a href=&quot;https://github.com/stargate/stargate/discussions/1528&quot;&gt;GitHub discussion&lt;/a&gt; if you have feedback on this.&lt;/p&gt;

&lt;h2 id=&quot;talking-to-coordinator-nodes-via-grpc&quot;&gt;Talking to coordinator nodes via gRPC&lt;/h2&gt;

&lt;p&gt;We were able to move quickly in implementing the new REST API service by using the new gRPC API exposed by the Stargate coordinator nodes. We’ve started to refer to the style of this interface as “CQL over gRPC” because the operations on the gRPC endpoint work in terms of providing CQL query strings and an array of parameters you wish to bind to the query string. We ended up creating a standalone query builder similar to the one available in the DataStax Java Driver in order to construct CQL strings that the standalone REST service could pass to the gRPC API. This work was not part of our original plan, but we hope it will make implementing subsequent services go more quickly.&lt;/p&gt;

&lt;h2 id=&quot;packaging-and-releasing-for-docker-and-kubernetes&quot;&gt;Packaging and releasing for Docker and Kubernetes&lt;/h2&gt;

&lt;p&gt;As mentioned above, we have an integration test configuration that launches the new REST API service alongside Stargate coordinator and Apache Cassandra&lt;strong&gt;®&lt;/strong&gt; nodes. We’re working on updated release processes so that we can have tagged releases for v2, associated Docker images, and example configurations for Docker Compose and Kubernetes.&lt;/p&gt;

&lt;p&gt;Since one of the Stargate v2 goals is to be more Docker/Kubernetes friendly, we’re also working on building Docker images as part of our regular Maven builds so we can make use of the images in local development for unit and integration testing. We’re looking at &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Google’s Jib&lt;/a&gt; as a possible option to replace our current process, which uses a separate &lt;a href=&quot;https://github.com/stargate/docker-images&quot;&gt;docker-images&lt;/a&gt; repo to build Docker images only after a release.&lt;/p&gt;

&lt;h2 id=&quot;whats-next-for-milestone-2&quot;&gt;What’s next for Milestone 2?&lt;/h2&gt;

&lt;p&gt;Now that we’ve mostly completed breaking our first API service out of the monolith, we’re working on setting up performance testing, reviewing the architecture, and getting ready to factor the GraphQL and Document APIs into their own services.&lt;/p&gt;

&lt;p&gt;We’d love to hear your inputs about the new architecture and the progress that is being made on the new implementation, so feel free to jump into the conversation on &lt;a href=&quot;https://discord.gg/HHtMAvjaZB&quot;&gt;Discord&lt;/a&gt; with questions, or comment on our &lt;a href=&quot;https://github.com/stargate/stargate/discussions?discussions_q=label:stargate-v2&quot;&gt;design discussions on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to Tatu Saloranta, Olivier Michallat, Doug Wettlaufer and Mark Stone for their contributions to the Stargate v2 effort and this post.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Stargate v2 Update: Reaching the First Milestone</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing Github branch renaming change</title><link href="https://stargate.io/2021/12/14/announce-github-naming-change.html" rel="alternate" type="text/html" title="Announcing Github branch renaming change" /><published>2021-12-14T06:00:00+00:00</published><updated>2021-12-14T06:00:00+00:00</updated><id>https://stargate.io/2021/12/14/announce-github-naming-change</id><content type="html" xml:base="https://stargate.io/2021/12/14/announce-github-naming-change.html">&lt;p&gt;Starting in October 2020, all new source code repositories created on GitHub have a primary branch named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; as part of the company’s effort to remove unnecessary references to slavery and replace them with more inclusive terms. This “fix forward first” approach is the first step in making systemic changes to the naming conventions.&lt;/p&gt;

&lt;p&gt;Github will also gradually rename their own internal repositories over time. This reflects the difficulty that Github and other organizations face – it’s hard to rename something that is in active use.&lt;/p&gt;

&lt;p&gt;Hard, but not impossible, and it’s the right thing to do. We at the Stargate project are following suit. We’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; as the name of our primary branch going forward, and we are actively renaming existing primary branches to be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. The Docs repo is the first to get renamed. Others will follow. We can’t let inertia be an impediment. We want our work on Stargate to be open, transparent, and inclusive. This is a necessary step to align with the virtue of inclusivity.&lt;/p&gt;</content><author><name></name></author><summary type="html">Starting in October 2020, all new source code repositories created on GitHub have a primary branch named main instead of master as part of the company’s effort to remove unnecessary references to slavery and replace them with more inclusive terms. This “fix forward first” approach is the first step in making systemic changes to the naming conventions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Native Driver Alternatives Using Stargate gRPC API in Java</title><link href="https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java.html" rel="alternate" type="text/html" title="Native Driver Alternatives Using Stargate gRPC API in Java" /><published>2021-11-29T06:00:00+00:00</published><updated>2021-11-29T06:00:00+00:00</updated><id>https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java</id><content type="html" xml:base="https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java.html">&lt;p&gt;Developers should be able to build highly scalable apps even when they call multilingual and multi-cloud microservices. That’s why the Stargate team recently made a new API generally available to help developers build applications with their preferred language.&lt;/p&gt;

&lt;p&gt;The new API is called &lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;gRPC Remote Procedure Call&lt;/a&gt; (gRPC), and we built it on the framework created by Google. In this post, we’ll show you how easy it is to start using this API from the Java ecosystem. We’ll also explain the basic methods exposed to the clients that allow us to interact with the gRPC API.&lt;/p&gt;

&lt;p&gt;The setup is simple. The generated code based on protobuf files (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query.proto&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stargate.proto&lt;/code&gt;) is shipped with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency. In your client application, you only need to add two dependencies, the client and a functional channel service provider. In this example we picked netty:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.stargate.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-proto&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.40&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-netty-shaded&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.40.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-netty-shaded&lt;/code&gt;, you’ll get the following error:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No functional channel service provider found. Try adding a dependency on the grpc-okhttp, grpc-netty, or grpc-netty-shaded artifact.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have all the needed dependencies we should be able to use the Stargate gRPC-stub API.&lt;/p&gt;

&lt;p&gt;After this step, you should have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; available on your classpath from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency. It contains the logic for interacting with Stargate gRPC API.&lt;/p&gt;

&lt;h2 id=&quot;putting-the-stargate-grpc-api-to-use&quot;&gt;Putting the Stargate gRPC API to use&lt;/h2&gt;

&lt;p&gt;Once we have the generated code with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; class shipped within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency, we’re ready to create the client.&lt;/p&gt;

&lt;p&gt;Before delving into the code, we need to generate the auth token that will be used to perform authorization. Please visit the &lt;a href=&quot;https://dtsx.io/3csSw47&quot;&gt;Stargate Authz documentation&lt;/a&gt; for a guide on this. Here’s some code that will work for our needs:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'localhost:8081/v1/auth'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;username&quot;: &quot;cassandra&quot;,
    &quot;password&quot;: &quot;cassandra&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this snippet, we’re assuming that Stargate is running on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8081&lt;/code&gt;. Once we have that, we can connect to the gRPC API. First, we need to generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt; that is used to perform the connection:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedChannelBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usePlaintext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usePlaintext()&lt;/code&gt; should only be used for development and testing. When used in a production environment it should use a load balancer that terminates transport layer security (TLS). For local development of Stargate, it will be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ManagedChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we can generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; stub. There are two ways of interacting with the gRPC API. The first one is synchronous (blocking):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.grpc.StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StargateBlockingStub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBlockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withCallCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token-value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second way of interacting is asynchronous (non-blocking):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StargateStub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withCallCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token-value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will focus on the blocking approach in this example since it is simpler to illustrate. Please be aware that for your use case you might need to use the second approach.&lt;/p&gt;

&lt;p&gt;We need to set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CallCredentials&lt;/code&gt;, using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token-value&lt;/code&gt; generated in the previous step. We will assume that all queries are executed within the existing keyspace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks&lt;/code&gt; and table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;. The table definition is as follows:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Stargate gRPC API provides a way to execute two types of queries: Standard CQL queries and batch queries containing N CQL queries.&lt;/p&gt;

&lt;h2 id=&quot;build-and-execute-a-standard-query-with-the-grpc-api&quot;&gt;Build and execute a standard query with the gRPC API&lt;/h2&gt;

&lt;p&gt;When we want to run a standard query we can start by inserting a record using the gRPC stub:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.proto.QueryOuterClass.Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.proto.QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('a', 1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will build and execute a single query. Next, we can retrieve the inserted record(s):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT k, v FROM ks.test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we print out the result set, it will have the following structure:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result_set &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  data &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    type_url: &lt;span class=&quot;s2&quot;&gt;&quot;type.googleapis.com/stargate.ResultSet&quot;&lt;/span&gt;
    value: &lt;span class=&quot;s2&quot;&gt;&quot;some_binary_data&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The value contains the binary data, that we can deserialize. First, we need to unwrap the result set:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it will return value for k = &quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it will return value for v = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can get all rows with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRowsList()&lt;/code&gt; method and iterate over the result or get the specific row using its index and pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRows(int index)&lt;/code&gt; method. We picked the latter approach in the example above.&lt;/p&gt;

&lt;p&gt;Our retrieval query (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT k, v FROM ks.test&lt;/code&gt;) stated explicitly which columns should be retrieved. Because of that, we can safely get the values using their positions via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getValues()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getString()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getInt()&lt;/code&gt; perform deserialization of data. These methods were used because we knew the underlying type of the corresponding columns. The API provides utility methods for deserialization for more types as well. For the full list of available types, see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; section in the &lt;a href=&quot;https://dtsx.io/3nxrgYI&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query.proto&lt;/code&gt;&lt;/a&gt; file. If you want to iterate over all results, you can with this snippet:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;row:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRowsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValuesList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will allow you to operate on a single row. When you execute it, you’ll get the following:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;string: &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
, int: 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-batch-queries-with-stargate-grpc-api&quot;&gt;Run Batch queries with Stargate gRPC API&lt;/h2&gt;

&lt;p&gt;In case we want to execute N queries, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executeBatch&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeBatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;               
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('a', 1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
             &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('b', 2)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This takes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; as an argument. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; can contain N queries of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;. We are adding two queries via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addQueries&lt;/code&gt; method. You can learn more about handling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; request in the &lt;a href=&quot;https://dtsx.io/3cs7doc&quot;&gt;Batch Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you know how to integrate the gRPC client via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockingStub&lt;/code&gt;. If you want to dive deeper into it take a look at the &lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;Java Client documentation on gRPC&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3qTlaUL&quot;&gt;Join the Stargate community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;Using Stargate gRPC API clients for Rust, Go and Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Developers should be able to build highly scalable apps even when they call multilingual and multi-cloud microservices. That’s why the Stargate team recently made a new API generally available to help developers build applications with their preferred language.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing Stargate v2</title><link href="https://stargate.io/2021/11/02/announcing-stargate-v2.html" rel="alternate" type="text/html" title="Announcing Stargate v2" /><published>2021-11-02T06:00:00+00:00</published><updated>2021-11-02T06:00:00+00:00</updated><id>https://stargate.io/2021/11/02/announcing-stargate-v2</id><content type="html" xml:base="https://stargate.io/2021/11/02/announcing-stargate-v2.html">&lt;p&gt;After a year of adding new APIs and features, we realized that this is an ideal time to take a step back and look at the overall architecture of &lt;a href=&quot;https://dtsx.io/3jNJGlR&quot;&gt;Stargate&lt;/a&gt;. We’re listening to feedback from the &lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate developer community&lt;/a&gt; and taking a look at our technical debt as well. Based on your inputs, we’ve begun some planning for a “Stargate v2” and have identified the following high-level goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Breaking up the monolith&lt;/li&gt;
  &lt;li&gt;Improving developer experience for contributors&lt;/li&gt;
  &lt;li&gt;Making Stargate more cloud-friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll expand on these goals below, but first, let’s take a look at how we reached this point.&lt;/p&gt;

&lt;h2 id=&quot;stargate-a-brief-history&quot;&gt;Stargate: a brief history&lt;/h2&gt;

&lt;p&gt;In September 2020 we &lt;a href=&quot;https://dtsx.io/3jQRa7D&quot;&gt;announced the Stargate project&lt;/a&gt; as an open-source data gateway. Our goal was to help speed up application development and reduce the workload for teams that find themselves creating and maintaining layers of microservice APIs on top of databases like &lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;Apache Cassandra®&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since that first release, which included support for CQL and REST APIs, the project has seen a number of milestones since then. Here are a few of the highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3EsZUsp&quot;&gt;GraphQL API&lt;/a&gt; and the &lt;a href=&quot;https://dtsx.io/3blyRCT&quot;&gt;Document API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2Y0PNLU&quot;&gt;1.0 milestone&lt;/a&gt; with capabilities for Real Quick Note First and Posts in TikTok.&lt;/li&gt;
  &lt;li&gt;Support for &lt;a href=&quot;https://dtsx.io/3pTsDT5&quot;&gt;Cassandra 4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://dtsx.io/3BGrHDV&quot;&gt;API access to DataStax Astra DB via Stargate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This represents a lot of change for a project that’s just over a year old, and now it’s time for us to set the stage for this open-source community to grow even more.&lt;/p&gt;

&lt;h2 id=&quot;breaking-up-the-monolith&quot;&gt;Breaking up the monolith&lt;/h2&gt;

&lt;p&gt;The current Stargate design is monolithic. Each Stargate node runs as a single process containing all of the supported APIs. This has a few consequences for deploying and running Stargate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;All of the APIs are enabled by default. You could run your own version with individual APIs disabled, but not by using the official Stargate Docker images. Instead, you’d have to download and build the Stargate source and selectively omit specific OSGI bundles from the startup script. This isn’t intuitive and requires knowledge of the existing bundles (more on OSGI below).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s not possible to scale the individual APIs. If you’re primarily using the REST API and need to scale up to meet increased REST traffic, you can’t just scale up REST independently. Instead, you have to add additional Stargate nodes supporting all the APIs to meet the demand. The nodes are “heavier” than they need to be, leading to inefficient resource usage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Today, extending Stargate with a new API requires creating a new module. (adding the module’s JAR files to the existing stargate-lib directory, then packaging all the JAR files, and configuration up for deployment.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the current design makes Stargate more difficult for both users and contributors, and it’s time to break up this monolith to improve the experience for everyone.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-developer-experience-for-users&quot;&gt;Improving the developer experience for users&lt;/h2&gt;

&lt;p&gt;As you’d expect, we absolutely want the &lt;a href=&quot;https://dtsx.io/3wdUGhp&quot;&gt;Stargate APIs&lt;/a&gt; to be as easy to use and adopt as possible, but our goals for v2 are specifically focused on making Stargate easy to deploy and manage, rather than on making API revisions.&lt;/p&gt;

&lt;p&gt;Stargate v2 will move the API implementations out of the Stargate node (aka “monolith”) into separate microservices. This will allow you to scale each API independently. You can even disable APIs that you don’t intend to use entirely, allowing you to focus on a smaller surface area of the project and giving you fewer endpoints to secure.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-developer-experience-for-contributors&quot;&gt;Improving the developer experience for contributors&lt;/h2&gt;

&lt;p&gt;We’re also committed to growing the community of open source developers who are actively contributing code to Stargate. For this reason, another major goal of v2 is to make the implementation itself easier to understand, debug, enhance, and extend.&lt;/p&gt;

&lt;h3 id=&quot;removing-osgi&quot;&gt;Removing OSGI&lt;/h3&gt;

&lt;p&gt;The original Stargate (“v1”) has a pluggable design, using the &lt;a href=&quot;https://www.osgi.org/&quot;&gt;OSGI framework&lt;/a&gt; to allow different modules to be composed at deployment time. This is useful for swapping in different Cassandra persistence modules, such as Cassandra 3.11, 4.0, and DataStax Enterprise 6.8. We chose OSGI because it’s a proven technology that provided us with the plugin framework we needed to iterate quickly.&lt;/p&gt;

&lt;p&gt;However, OSGI isn’t widely used these days, and several developers have reported that debugging can be difficult due to the nuances of working with OSGI. The move to microservices will help reduce the need for OSGI, and we’ll work toward replacing the remaining usage with another solution.&lt;/p&gt;

&lt;h3 id=&quot;encouraging-modernization-and-innovation&quot;&gt;Encouraging modernization and innovation&lt;/h3&gt;

&lt;p&gt;The current requirement to support a Cassandra 3.11 persistence layer means that the Stargate nodes must run Java 8 — the lowest common denominator. Unfortunately, this has prevented the usage of more modern Java frameworks, such as Quarkus or Micronaut that require later Java versions.&lt;/p&gt;

&lt;p&gt;We believe that one of the great benefits of breaking up the monolith will be to encourage innovation in the Stargate community. The v2 architecture will be more conducive to external contributions since the developer of each microservice will be able to make their own choices about what language and frameworks to use. This has the dual benefit of both modernizing Stargate and potentially attracting contributors who are interested in working with new and exciting frameworks or languages.&lt;/p&gt;

&lt;h3 id=&quot;refactoring-and-cleanup&quot;&gt;Refactoring and cleanup&lt;/h3&gt;

&lt;p&gt;As with any project that has many contributors, the codebase has started to show some entropy. Although it’s nowhere near “spaghetti code” state, the modules and Java package structure could use some refactoring. We’re hoping to clean up some dependencies and improve the overall code organization to make it easier for you to find your way around.&lt;/p&gt;

&lt;h2 id=&quot;making-stargate-more-cloud-friendly&quot;&gt;Making Stargate more cloud-friendly&lt;/h2&gt;

&lt;p&gt;While the Stargate project currently provides &lt;a href=&quot;https://dtsx.io/3myshiV&quot;&gt;Docker images&lt;/a&gt; that can be used for deployment in containerized environments, Stargate v2 is going to add additional images for the various microservices. This will add some complexity to deployments.&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; has emerged as the clear choice for container orchestration in both public and private clouds, v2 will provide assistance in deploying Stargate on Kubernetes via Helm. We envision providing a Helm chart to expose each enabled API as a Kubernetes Service, use Deployments to manage replicas of the API implementations, create a StatefulSet to manage the persistence nodes, and so on.&lt;/p&gt;

&lt;p&gt;On another note, we look forward to continuing our collaboration with the &lt;a href=&quot;https://dtsx.io/3Erl8Xr&quot;&gt;K8ssandra&lt;/a&gt; project, which provides deployments of Stargate and Cassandra on Kubernetes. The K8ssandra team is also building a &lt;a href=&quot;https://dtsx.io/3vYmeqJ&quot;&gt;Stargate Controller&lt;/a&gt; as part of the &lt;a href=&quot;https://github.com/k8ssandra/k8ssandra-operator&quot;&gt;K8ssandra Operator&lt;/a&gt; for their own v2 release.&lt;/p&gt;

&lt;h2 id=&quot;the-journey-to-v2-is-just-beginning&quot;&gt;The journey to V2 is just beginning&lt;/h2&gt;

&lt;p&gt;We’re just getting started on working toward a Stargate v2 release and are committed to sharing our plans and progress early and often. We’d love to get as much input as possible from the &lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate open source community&lt;/a&gt;. In our next blog post, we’ll introduce a proposed design for Stargate v2, other design options we considered, and share how you can provide feedback on the proposal.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3jNJGlR&quot;&gt;Stargate.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate Community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3pTsDT5&quot;&gt;Stargate and Cassandra 4.0 - Better Together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3wdUGhp&quot;&gt;Stargate APIs - GraphQL, REST, Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3Erl8Xr&quot;&gt;K8ssandra - K8ssandra, Apache Cassandra® on Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">After a year of adding new APIs and features, we realized that this is an ideal time to take a step back and look at the overall architecture of Stargate. We’re listening to feedback from the Stargate developer community and taking a look at our technical debt as well. Based on your inputs, we’ve begun some planning for a “Stargate v2” and have identified the following high-level goals:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing the Design for Stargate v2</title><link href="https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html" rel="alternate" type="text/html" title="Introducing the Design for Stargate v2" /><published>2021-11-02T06:00:00+00:00</published><updated>2021-11-02T06:00:00+00:00</updated><id>https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2</id><content type="html" xml:base="https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html">&lt;p&gt;When we &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;announced Stargate v2&lt;/a&gt;, we mainly focused on the “why” behind the change. In this post, we’ll dive into the “how.”&lt;/p&gt;

&lt;p&gt;Like all things in software engineering, arriving at this point was an iterative process. We’ll show you some of the designs we considered before landing on the one we propose today.&lt;/p&gt;

&lt;p&gt;For context, we had a few different criteria in mind while reviewing each of these designs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ease of contribution:&lt;/strong&gt; We wanted to make sure that whatever change we made resulted in it being easier for both new and existing contributors to work with &lt;a href=&quot;https://dtsx.io/3w732Y9&quot;&gt;Stargate&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment flexibility:&lt;/strong&gt; The ability to scale components independently was important to us, but we recognize that not everyone will need this and would instead prefer only one or two containers running.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ongoing performance:&lt;/strong&gt; Of course, we also wanted to be sure that neither of the above changes came at the cost of latency, so we also wanted to ensure that the potential design would still be performant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that said, let’s get into the designs.&lt;/p&gt;

&lt;h2 id=&quot;considered-designs&quot;&gt;Considered designs&lt;/h2&gt;

&lt;p&gt;Not every idea can be a winner, and we abandoned our fair share of ideas during this design process. Here we’ll discuss some of these runners-up and explain why they didn’t make the cut. All of them share one thing in common: they assume deployment on &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;design-1-separate-everything&quot;&gt;Design 1: Separate everything&lt;/h3&gt;

&lt;p&gt;One of our ideas was to go in the opposite direction of where Stargate is currently. In this design, we’d switch from a “shared everything” approach to a “shared nothing.” Instead of everything running within the same JVM and connected using &lt;a href=&quot;https://www.osgi.org/&quot;&gt;OSGi&lt;/a&gt;, each component of Stargate would be its own .jar capable of running in a dedicated container. The diagram below illustrates what this new architecture would look like.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-shared-nothing.png&quot; alt=&quot;Figure 1: Diagram of our proposed 'shared nothing' design for Stargate v2.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 1: Diagram of our proposed 'shared nothing' design for Stargate v2.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From left to right, here’s how it would work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A request would come in through the load balancer and then be routed to the proper user-facing service based on routing rules.&lt;/li&gt;
  &lt;li&gt;Each service would be responsible for transforming its request into a gRPC payload that it would pass on to an internal gRPC (i.e. the “Bridge”).&lt;/li&gt;
  &lt;li&gt;The Bridge would apply all cross-cutting concerns, like authentication and authorization, before passing the request along to the persistence service again over gRPC.&lt;/li&gt;
  &lt;li&gt;Finally, the persistence would take the gRPC payload and transform it into CQL that could be processed and coordinated to the underlying storage nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One benefit of this approach is that it provides flexibility for scaling and deployment. For example, if you don’t need the REST API then you would have the option to not deploy that pod. Likewise, for scaling, if you had more &lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;GraphQL&lt;/a&gt; traffic than &lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;Document API&lt;/a&gt;, you could add more GraphQL pods without changing the other deployments.&lt;/p&gt;

&lt;p&gt;An immediate downside to this approach was for CQL, since those requests would need to be transformed from CQL frames to gRPC and then back to CQL. Given CQL’s latency-sensitive nature, we felt the additional overhead of multiple serialization and deserialization would be unacceptable.&lt;/p&gt;

&lt;p&gt;Furthermore, this approach would require creating a new schema definition language to transport the requests between services. Although this would certainly be helpful for services that operate at a higher level than plain CQL (like the Documents API), we thought it was unnecessarily complex.&lt;/p&gt;

&lt;h3 id=&quot;design-2-using-cql-to-communicate&quot;&gt;Design 2: Using CQL to communicate&lt;/h3&gt;

&lt;p&gt;The next option we considered was similar to the “shared nothing” design, but differed in that it used CQL as the communication protocol.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-cql-shared-nothing.png&quot; alt=&quot;Figure 2: Diagram of a 'shared nothing' approach using CQL to communicate.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 2: Diagram of a 'shared nothing' approach using CQL to communicate.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this design both the CQL and persistence services would share the same container to reduce CQL latency, but the other services would be separated. For communication, each service would accept its request and then transform it into a CQL statement, which could be sent back to the CQL service via a driver.&lt;/p&gt;

&lt;p&gt;This seemed like a promising approach since all of the current services are written in Java, which has a robust CQL driver. Except for the requirement of a driver introduces three potential issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stargate is written in Java, but we welcome the possibility of services being written in other languages. Although this means your language of choice would need a driver, and if it has a driver, it needs to be in a usable state.&lt;/li&gt;
  &lt;li&gt;Having a driver bridge the communication gap between user-facing service and persistence creates some authentication issues. Since drivers tend to be session-scoped with a username and password, each service would need to create a new session for each request. Alternatively, there would need to be a system user for the services, which would then need to execute the queries on behalf of the user initiating the request.&lt;/li&gt;
  &lt;li&gt;Even though most of the services are a one-to-one translation to CQL, there are occasions when this isn’t the case, so it would require making several requests from the service to persistence.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;design-3-multiple-bridges&quot;&gt;Design 3: Multiple bridges&lt;/h3&gt;

&lt;p&gt;One of our next ideas was a hybrid of the previous two. In this design, the simpler services that map more readily to CQL would take one path to the persistence service, while the others would take a different path.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-multibridge.png&quot; alt=&quot;Figure 3: Diagram of a hybrid approach for Stargate v2 using multiple bridges.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 3: Diagram of a hybrid approach for Stargate v2 using multiple bridges.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown in the diagram above, we have now gone from one to two Bridge pods and split up the GraphQL service. At the top half of the diagram, things have stayed largely the same in that services that map cleanly to CQL transform their requests into a gRPC payload and then pass that to the Bridge. Where this diverges is the “not directly CQL” services, which now go through a different Bridge that translates the requests into something lower-level before passing them along to the primary Bridge service.&lt;/p&gt;

&lt;p&gt;One of the benefits of this design is that it removes the complexity of translating requests into gRPC from the external services and pushes it down into a centralized location. The translation Bridge can take the customized requests from both the Documents API and the schema-first version of GraphQL and transform them into simpler gRPC payloads that the inner Bridge service can process.&lt;/p&gt;

&lt;p&gt;That being said, this design still suffers from the same downside of the previous design where it has several layers of translation and adds yet another layer for two of the services.&lt;/p&gt;

&lt;h2 id=&quot;meet-the-winning-design&quot;&gt;Meet the winning design&lt;/h2&gt;

&lt;p&gt;After weighing the pros and cons of the other potential designs, we finally settled on what we believe is the best option for Stargate v2. Take a look at the diagram below.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-services.png&quot; alt=&quot;Figure 4: Diagram of the final design approach for Stargate v2.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 4: Diagram of the final design approach for Stargate v2.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This design is similar to the earlier ones where the user-facing services are sitting behind a load balancer and communicating with the persistence service via gRPC. Although a noticeable feature is the addition of a “Coordinator Node.” This new Coordinator Node pod will contain three different services that run together in the same JVM: CQL, Bridge, and Persistence.&lt;/p&gt;

&lt;p&gt;Next, we’ll briefly explain how the services involved in this design will work.&lt;/p&gt;

&lt;h3 id=&quot;services&quot;&gt;Services&lt;/h3&gt;

&lt;p&gt;The services component of Stargate will be composed of the discrete, user-facing services running as independent pods. Each service will be responsible for serving requests on its respective interface by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Accepting requests&lt;/li&gt;
  &lt;li&gt;Transforming them into CQL&lt;/li&gt;
  &lt;li&gt;Passing them along to the Bridge via a gRPC request&lt;/li&gt;
  &lt;li&gt;Transforming the gRPC response back into its format (like JSON or GraphQL) and returning the payload to the user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;REST, GraphQL, and gRPC continue to convert their respective request types into CQL strings. The Bridge will then pass the CQL string to the persistence service for the query to be executed. Going through the intermediate gRPC provides the services with a gRPC interface (rather than relying on drivers) and takes advantage of cross-cutting functionality provided by the Bridge.&lt;/p&gt;

&lt;h3 id=&quot;bridge&quot;&gt;Bridge&lt;/h3&gt;

&lt;p&gt;The Bridge will be a gRPC service that connects the various user-facing services with the persistence service. Its responsibilities will be to accept gRPC requests while performing authentication and authorization.&lt;/p&gt;

&lt;p&gt;This service will be implemented in almost the same manner as the user-facing gRPC. This service will live within the same JVM as the persistence service and support cross-cutting concerns, such as: authentication and authorization, pluggable request/response filters (e.g. encryption, data masking), and metrics.&lt;/p&gt;

&lt;p&gt;As a cross-cutting concern, it makes sense to push authentication and authorization into this layer rather than expecting each service to reimplement the same functionality.&lt;/p&gt;

&lt;h3 id=&quot;cql-service&quot;&gt;CQL Service&lt;/h3&gt;

&lt;p&gt;The CQL service will continue to function in the same way it does today. It‘ll be considered part of the Coordinator Node and live within the same JVM as the persistence service and Bridge. Since it’s part of the Bridge, it’ll also take advantage of the same cross-cutting libraries as the Bridge.&lt;/p&gt;

&lt;h3 id=&quot;persistence&quot;&gt;Persistence&lt;/h3&gt;

&lt;p&gt;There won’t be much difference in the persistence services that Stargate currently offers. They’ll still operate as coordinators and keep all their existing functionality. The primary changes will just be cosmetic, like removing OSGi (if necessary).&lt;/p&gt;

&lt;p&gt;The Bridge will be packaged within each Persistence layer to produce deployable containers for each supported backend (C* 4.0, DSE 6.8, etc.).&lt;/p&gt;

&lt;h3 id=&quot;rest-graphql-and-grpc-services&quot;&gt;REST, GraphQL, and gRPC services&lt;/h3&gt;

&lt;p&gt;The current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; module will be refactored to a separate microservice that uses the internal gRPC API of the Bridge. Dependence on OSGI will be removed — although we’ll likely reuse the health checker module for this and the other HTTP-based API services to provide endpoints for liveness/readiness.&lt;/p&gt;

&lt;p&gt;The REST API service will continue to support both the REST v1 and v2 APIs as there’ll be no API contract changes. The current GraphQL and gRPC API implementations will be factored out from their current places into separate microservices that use the internal gRPC API, and we’ll remove the dependence on OSGI.&lt;/p&gt;

&lt;h3 id=&quot;document-api-service&quot;&gt;Document API service&lt;/h3&gt;

&lt;p&gt;The current Document API implementation will be moved from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; module into a separate microservice that uses the internal gRPC API. Dependence on OSGI will also be removed.&lt;/p&gt;

&lt;p&gt;Because the Document API operates at a higher level than REST or GraphQL, it won’t follow the same pattern as those two services. Instead, it’ll need to either pull back more data than it needs and perform filtering on its side or send a different sort of payload to the Bridge, which is then interpreted and executed. An example of this payload would be an OR query. Both sides have their benefits. By pulling back more data than necessary reduces the complexity of the Bridge and moves the resource penalty (high memory usage) to the Document API service.&lt;/p&gt;

&lt;p&gt;On the other hand, if we were to handle this on the Coordinator Node side we would then be able to reuse this functionality in other services. An application of this would be to add ORs or JOINs to GraphQL. We’ll resolve this question based on further testing as we progress.&lt;/p&gt;

&lt;h3 id=&quot;load-balancing-authentication-and-other-cross-cutting-concerns&quot;&gt;Load balancing, authentication, and other cross-cutting concerns&lt;/h3&gt;

&lt;p&gt;We don’t assume usage of any particular ingress but encourage its use. The intent is to be compatible with whatever load balancer is used, be it Nginx, Envoy, or HAProxy.&lt;/p&gt;

&lt;p&gt;For HTTP services we could move some of the cross-cutting functionality into a load balancer by exposing endpoints for rate limiting and ext_authz. But we would then leave it up to each user to implement this for their particular load balancer (assuming that their load balancer supports that functionality). For CQL, we still need to implement this logic within Stargate since load balancers wouldn’t be able to act on the binary protocol.&lt;/p&gt;

&lt;p&gt;Authentication and authorization will continue to be pluggable as it is today. Although we include some base implementations, it’ll still be possible to support other methods by implementing the necessary interface.&lt;/p&gt;

&lt;h2 id=&quot;deployment-considerations&quot;&gt;Deployment considerations&lt;/h2&gt;

&lt;p&gt;Breaking apart Stargate will require changes to how it’s deployed, meaning we’ll need to create a Helm chart. As we iterate, this chart can become more advanced and allow for a more customizable deployment (e.g. just REST or some other subset of services).&lt;/p&gt;

&lt;p&gt;In the base case, the chart will deploy each of the user-facing services as a separate pod in addition to the Coordinator Node pod (persistence, CQL, and Bridge). For resource-constrained environments, where there’s a sensitivity to the number of pods, various combinations of pods and containers are possible. For one, it could maintain the same setup as exists today by placing all of the containers in a single pod. Another setup could be two pods: one for the Coordinator Node and another for the services.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;We believe that the changes proposed in this design will lead to a much better experience for those who contribute to the Stargate project and those who run it to support their other applications.&lt;/p&gt;

&lt;p&gt;Contributors will be able to quickly iterate on just the parts of the project they want without needing to understand as deeply the other components. Plus, it’ll open up the potential for newer Java versions and frameworks rather than Java 8 with OSGi or even a polyglot environment. Meanwhile, operators will have greater flexibility over their Stargate deployment and the potential for a lower-resource footprint when scaling to handle higher loads.&lt;/p&gt;

&lt;p&gt;Overall, we’re excited about these new changes and look forward to working with the &lt;a href=&quot;https://dtsx.io/3pMAp0Y&quot;&gt;Stargate community&lt;/a&gt; to make this new design a reality. On that note, if you want to review this design and give us your feedback, &lt;a href=&quot;https://dtsx.io/2ZQoJQ4&quot;&gt;join the discussion on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3w732Y9&quot;&gt;Stargate.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2021/11/01/announcing-stargate-v2.html&quot;&gt;Announcing Stargate v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3pMAp0Y&quot;&gt;Stargate Community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2ZQoJQ4&quot;&gt;Stargate v2 discussion on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2020/10/05/hello-graphql.html&quot;&gt;Blog: Hello GraphQL: meet Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html&quot;&gt;Blog: The Stargate Cassandra Documents API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3CoHWXf&quot;&gt;Stargate Document API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3moyxcN&quot;&gt;Stargate REST API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;Stargate GraphQL API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3mnCcrp&quot;&gt;Stargate CQL API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">When we announced Stargate v2, we mainly focused on the “why” behind the change. In this post, we’ll dive into the “how.”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate and Cassandra 4.0 - Better Together</title><link href="https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together.html" rel="alternate" type="text/html" title="Stargate and Cassandra 4.0 - Better Together" /><published>2021-07-28T06:00:00+00:00</published><updated>2021-07-28T06:00:00+00:00</updated><id>https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together</id><content type="html" xml:base="https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together.html">&lt;p&gt;Six years in the making, Apache Cassandra has reached its 4.0 GA release. This is a big milestone for one of the most important open source projects, and a significant step forward in the world of NoSQL and Fast Data.&lt;/p&gt;

&lt;h2 id=&quot;highlights-in-40&quot;&gt;Highlights in 4.0&lt;/h2&gt;

&lt;p&gt;This new release brings a lot of exciting features to Apache Cassandra. A few highlights include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 11 support;&lt;/li&gt;
  &lt;li&gt;Virtual tables;&lt;/li&gt;
  &lt;li&gt;Improved streaming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the full list head over to the &lt;a href=&quot;https://cassandra.apache.org/doc/latest/new/&quot;&gt;official Apache Cassandra docs&lt;/a&gt;. After reading over everything Cassandra 4.0 brings to the table you might be wondering, “What more could I need?”. Well, that’s where Stargate comes in.&lt;/p&gt;

&lt;h2 id=&quot;what-is-stargate&quot;&gt;What Is Stargate?&lt;/h2&gt;

&lt;p&gt;Stargate is a data gateway providing a multi-model set of APIs through which to interact with your Cassandra database. DataStax runs Stargate as part of &lt;a href=&quot;https://www.datastax.com/products/datastax-astra&quot;&gt;Astra DB&lt;/a&gt;, and Stargate can also be deployed on prem with DataStax Enterprise. And of course Stargate is an open source project in its own right that works with open source Apache Cassandra.&lt;/p&gt;

&lt;p&gt;So why does Stargate matter to developers, and to the Cassandra community?&lt;/p&gt;

&lt;h3 id=&quot;focus-on-what-you-care-about&quot;&gt;Focus On What You Care About&lt;/h3&gt;

&lt;p&gt;For many developers a database is simply a means to an end. We spend our days trying to rapidly deliver incredible applications to benefit our users. Applications typically require some form of data persistence. This may mean direct database access with a driver of some sort but others would rather have an API that allows them to think about and interact with their data in a more familiar vernacular. At this point we’re typically left to either spin up yet another data service or add a new endpoint to our already growing data proxy. But now there’s another option, Stargate.&lt;/p&gt;

&lt;p&gt;When we say Stargate is multi-model, this is the problem we’re solving. Whatever a developer’s preferred API for data interactions, Stargate offers a single gateway to support that API. Rather than incurring the cost of supporting an ancillary service in order to expose, say, a new GraphQL API to interact with your data you can instead install Stargate as part of your Cassandra cluster leaving more time to focus on what you really care about, your users.&lt;/p&gt;

&lt;h3 id=&quot;any-way-you-want-it&quot;&gt;Any Way You Want It&lt;/h3&gt;

&lt;p&gt;As discussed in our &lt;a href=&quot;https://stargate.io/2020/09/14/init-stargate.html&quot;&gt;previous blog&lt;/a&gt;, Stargate is an “open source data gateway” that provides multiple APIs for interacting with your data in a familiar and secure manner. You could grab the Cassandra driver for the language of your choice and start developing from there (an option completely supported by Stargate), and now you can also choose one of the APIs supported by Stargate that you’re already familiar with such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REST&lt;/li&gt;
  &lt;li&gt;Documents API&lt;/li&gt;
  &lt;li&gt;GraphQL&lt;/li&gt;
  &lt;li&gt;gRPC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The REST API in Stargate enables you to work with your data in a RESTful format. It exposes a complete CRUD interface for your entire data lifecycle, from schema creation to data manipulation and retrieval. Additionally, there is the Documents API that allows for data management in a schemaless manner which allows for fast iteration without worrying about data modeling. See &lt;a href=&quot;https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html&quot;&gt;this blog article&lt;/a&gt; for a deeper dive into the Documents API. Aside from the more traditional, RESTful interfaces there is also the GraphQL API. This API allows you to interact with your data in either a &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/graphql-using.html&quot;&gt;cql-first&lt;/a&gt; or &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/graphql-first-using.html&quot;&gt;schema-first&lt;/a&gt; manner. This new schema-first version is a reimagining of the original cql-first API and provides a more GraphQL native interface that should be familiar to any GraphQL developer. Finally, there is the gRPC API currently in alpha. This new API brings with it all of the existing gRPC and HTTP/2 benefits while still accepting the CQL you’re used to.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Now that we’ve highlighted how Stargate can make Cassandra 4.0 even easier to work with, it’s time to give it a spin. Starting with v1.0.31 &lt;a href=&quot;https://hub.docker.com/r/stargateio/stargate-4_0&quot;&gt;Stargate Docker images&lt;/a&gt; will support Cassandra 4.0 GA versions and beyond. Check out &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/install/install_cass_40.html&quot;&gt;our docs&lt;/a&gt; and &lt;a href=&quot;https://github.com/stargate/docker-images/tree/master/cassandra-4.0&quot;&gt;examples&lt;/a&gt; for simple getting started instructions.&lt;/p&gt;

&lt;h2 id=&quot;what-40-means-for-stargate&quot;&gt;What 4.0 Means for Stargate&lt;/h2&gt;

&lt;p&gt;Since pre-v1.0 Stargate we’ve supported Apache Cassandra 4.0. We’ve been there for alphas, betas, and release candidates but today we’re happy to announce that Stargate supports the official Apache Cassandra 4.0 GA release.&lt;/p&gt;

&lt;p&gt;This is an evolutionary change for Stargate more than a ground-breaking step. To bring the flexibility and ease of use that Stargate offers to as many developers as possible, we have always targeted multiple platforms (open source Apache Cassandra, Astra DB, and DataStax Enterprise) as well as multiple versions of Apache Cassandra (3.x and now 4.x). So you don’t need to worry about breaking changes or backwards compatibility. Stargate will continue to support these platforms and versions going forward.&lt;/p&gt;

&lt;p&gt;Features like improved internode messaging will benefit Stargate, but we don’t have to do anything in Stargate to receive those benefits; they’ll happen organically below the Stargate coordinator layer. Features like improved streaming offer new opportunities for streaming support in Stargate which we hope to take advantage of in the future. For now rest assured that new streaming features in Stargate will be planned to work with both 4.x and 3.x.&lt;/p&gt;

&lt;p&gt;The world’s most scalable open source database just got better. As a result, Stargate got better too.&lt;/p&gt;</content><author><name></name></author><summary type="html">Six years in the making, Apache Cassandra has reached its 4.0 GA release. This is a big milestone for one of the most important open source projects, and a significant step forward in the world of NoSQL and Fast Data.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>