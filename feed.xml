<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://stargate.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://stargate.io/" rel="alternate" type="text/html" /><updated>2022-02-07T19:02:46+00:00</updated><id>https://stargate.io/feed.xml</id><title type="html">Stargate</title><subtitle>An open source API framework for data.</subtitle><author><name></name></author><entry><title type="html">Stargate gRPC: The Better Way to CQL</title><link href="https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql.html" rel="alternate" type="text/html" title="Stargate gRPC: The Better Way to CQL" /><published>2022-01-15T06:00:00+00:00</published><updated>2022-01-15T06:00:00+00:00</updated><id>https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql</id><content type="html" xml:base="https://stargate.io/2022/01/15/stargate-grpc-the-better-way-to-cql.html">&lt;h1 id=&quot;stargate-grpc-the-better-way-to-cql&quot;&gt;&lt;strong&gt;Stargate gRPC: The Better Way to CQL&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/data-cloud.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stargate’s new gRPC API is so much more than just a feature release — it’s your official welcome to the “no drivers” future of Apache Cassandra.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently, we &lt;a href=&quot;https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java&quot;&gt;released gRPC as the newest API&lt;/a&gt; supported by &lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt;, our API data gateway. On the surface, it would seem like the API doesn’t do very much; it receives CQL queries via the gRPC protocol, then passes those to &lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;Apache Cassandra®&lt;/a&gt; and returns the results. Sounds like a pretty modest feature release, right?&lt;/p&gt;

&lt;p&gt;In reality, what the Stargate team has delivered is groundbreaking. Not quite a native driver and not quite a simple HTTP-based API, Stargate’s gRPC implementation represents a fundamentally new approach for applications interacting with Cassandra — an approach that’s more cloud native than any driver, and more performant than any simple HTTP-based API.&lt;/p&gt;

&lt;p&gt;So let me tell you why this approach is so important, and why this is such a revolutionary solution for a common developer problem.&lt;/p&gt;

&lt;h2 id=&quot;native-drivers-are-not-cloud-friendly&quot;&gt;Native drivers are not cloud friendly&lt;/h2&gt;

&lt;p&gt;Functionality inside a native driver can be divided into two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The query engine.&lt;/strong&gt; This issues requests in a particular query language for a particular database, and receives responses to those requests that can then be used in application code. In our case, the query language is CQL, and the database is Cassandra.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operational management.&lt;/strong&gt; This includes tasks like connection pooling, TLS, authentication, load balancing, retry policies, write coalescing, compression, health checks, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll notice that most of those operational tasks are abstracted away from applications in cloud environments, and simply handled automatically on behalf of the application. For example, load balancing, health checks, and TLS termination are intrinsic to most cloud environments; even retries can be configured within the environment.&lt;/p&gt;

&lt;p&gt;Put another way: in a well-designed microservices environment, network management tasks should live inside a service boundary and execute within an SLA defined in a service contract. There should be no need, and it would be a violation of microservices principles for an application to want to reach across that boundary and directly manipulate those operational tasks.&lt;/p&gt;

&lt;p&gt;And yet, this is exactly what native drivers do.&lt;/p&gt;

&lt;p&gt;This is not a mere architectural nicety. Building native drivers into an otherwise cloud-native, microservice-oriented application has real and negative consequences. Let’s dig a little deeper into why.&lt;/p&gt;

&lt;p&gt;Native protocol drivers are expensive to maintain and require reimplementing the same complex functionality for different platforms (like Java, Go, Node, Rust). All that operational management forces developers to extend their skill set from application development in their preferred language to areas of systems operation, thus steepening the learning curve for native drivers.&lt;/p&gt;

&lt;p&gt;More significantly, this co-mingling of concerns opens up a new vector that could trigger the need for a driver update. A configuration change in the network environment, for example, could require an update to the way every driver handles load balancing or connection pooling. Now your organization has to stop every application instance using that driver, apply the change within the driver, and restart all those application instances. Depending on the nature of the driver change, some changes in the rest of the application may also be required.&lt;/p&gt;

&lt;p&gt;They also inject surprising brittleness into applications because of the network management overhead required, making it more likely that drivers, and therefore applications that use them, must be updated.&lt;/p&gt;

&lt;p&gt;In sum, native drivers are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complex and present a steep learning curve&lt;/li&gt;
  &lt;li&gt;Hard to update and maintain&lt;/li&gt;
  &lt;li&gt;Speed bumps for developer velocity&lt;/li&gt;
  &lt;li&gt;A threat to application resilience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can safely say that native drivers are fast, which makes it easy to overemphasize raw performance, but the overall picture of performance and resilience is much more complicated.&lt;/p&gt;

&lt;h2 id=&quot;http-based-apis-are-a-performance-trade-off&quot;&gt;HTTP-based APIs are a performance trade-off&lt;/h2&gt;

&lt;p&gt;The modern approach to application development is, in part, a rebellion against the burden of native drivers. Today’s application developers, particularly front end developers, are expected to interact with data through an HTTP-based API and rely on JSON as the primary method of structuring data.&lt;/p&gt;

&lt;p&gt;We fully support this API-based approach on Stargate. This has several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Language agnosticism.&lt;/strong&gt; Applications can be written in any language that can talk to an HTTP endpoint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Separation of concerns&lt;/strong&gt; between application environment and infrastructure environment. Precisely as should happen in a cloud-native context, all of the network management and operational overhead lives behind the API. Changes and updates there stay contained within that service boundary, removing this as an area of concern for application logic.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resilience.&lt;/strong&gt; The statelessness of HTTP constrains application design to avoid reliance on durable network connections, meaning applications designed in this manner are more resilient against the vagaries of network behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unsurprisingly, HTTP-based APIs have become the backbone of microservice applications for a cloud-native environment. But these benefits are not free. HTTP-based APIs are a slower way to query a database, for two reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt; -  Native drivers talk “closer to the wire,” which significantly improves performance. The Java driver for CQL, for example, operates at Layer 5, whereas HTTP operates at Layer 7.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data transformation&lt;/strong&gt; - Databases don’t store JSON natively (even MongoDB relies on the WiredTiger storage engine when you drill down far enough). So some transformation has to happen to turn a JSON-oriented query into a native database query (CQL, in the case of Cassandra). The compute overhead of performing this transformation further slows performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And now, we have a dilemma. On one hand, HTTP-based APIs offer simplicity and language agnosticism that accelerates developer velocity, while also offering a separation of concerns between application and infrastructure that improves application resilience. To put it simply, HTTP-based APIs are good cloud citizens, presenting and abiding by clear service boundaries.&lt;/p&gt;

&lt;p&gt;On the other hand, while native drivers are a burden to developers and co-mingled concerns between development and operations negatively impact resilience, native drivers are just flat out more performant than HTTP-based APIs.&lt;/p&gt;

&lt;p&gt;So, what to do?&lt;/p&gt;

&lt;h2 id=&quot;decomposing-the-driver&quot;&gt;Decomposing the driver&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt; supports native driver calls, offering a CQL API through which to talk to Cassandra. This is essentially just a transparent proxy, and so CQL calls via Stargate remain highly performant. Let’s look at a simple architecture diagram of this part of Stargate. (See Figure 1.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 1: Simple Architecture of Native Driver and Stargate.&lt;/p&gt;

&lt;p&gt;The fundamental problem is the co-mingling of concerns. Some of what lives inside the native driver should, in a cloud-native context, live behind an API and thus inside the API’s service boundary. So what if we looked at it this way instead? (See Figure 2.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 2: Decomposing the driver.&lt;/p&gt;

&lt;p&gt;The real challenge is how to move that box that says “Network Management Tasks” across the service boundary into Stargate and behind an API. We’ll also have to do it in a way that honors the language agnosticism of APIs. Without that agnosticism, we have to maintain a different “box” of network management tasks for each language, even though those tasks are essentially the same across languages. We’d lighten the driver but make Stargate harder to maintain, and a good bit less cloud friendly.&lt;/p&gt;

&lt;h2 id=&quot;enter-grpc&quot;&gt;Enter gRPC&lt;/h2&gt;

&lt;p&gt;In 2008, Google developed, open-sourced and released &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protocol Buffers&lt;/a&gt; — a language-neutral mechanism for serializing structured data. In 2015, Google released &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; (also open source) to incorporate Protocol Buffers into work to modernize Remote Procedure Call (RPC).&lt;/p&gt;

&lt;p&gt;gRPC has a couple of important performance characteristics. One is the improved data serialization, making data transit over the network much more efficient. The other is the use of HTTP/2, which enables bidirectional communication. As a result, there are four call types supported in gRPC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unary calls&lt;/li&gt;
  &lt;li&gt;Client side streaming calls&lt;/li&gt;
  &lt;li&gt;Server side streaming calls&lt;/li&gt;
  &lt;li&gt;Bidirectional calls, which are a composite of client side and server side streaming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put all this together and you have a mechanism that is fast — &lt;em&gt;very&lt;/em&gt; fast when compared to other HTTP-based APIs. gRPC message transmission can be &lt;a href=&quot;https://blog.dreamfactory.com/grpc-vs-rest-how-does-grpc-compare-with-traditional-rest-apis/&quot;&gt;7x to 10x faster&lt;/a&gt; than traditional REST APIs. In other words, a solution based on gRPC could offer performance comparable to native drivers.&lt;/p&gt;

&lt;h2 id=&quot;stargate-grpc&quot;&gt;Stargate gRPC&lt;/h2&gt;

&lt;p&gt;When you pull all of the network management tasks out of a driver, what you’re left with is a thin client library containing little more than the query engine. In our case, these CQL queries transit to a Stargate API endpoint via gRPC. (See Figure 3.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grpc-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 3: Stargate’s gRPC Implementation.&lt;/p&gt;

&lt;p&gt;Behind that endpoint is what amounts to a CQL driver written in gRPC. In other words, it receives CQL calls on the API endpoint via gRPC, and then makes direct CQL calls to Cassandra. No data transformation is required, because we’re using CQL end to end.&lt;/p&gt;

&lt;p&gt;These client libraries are dramatically easier to write and maintain. Our original intent was to launch with client libraries for Java and for Go, since these are our two most requested languages. As it happened, adding new languages was so easy that we also included client libraries for Node.js and Rust.&lt;/p&gt;

&lt;p&gt;These four — and perhaps more languages in the future -— represent a fully DataStax-supported way to make CQL calls from your application. We’ll continue to support our existing native drivers, and in those languages the gRPC client libraries represent an additional, supported alternative. For languages like Go where DataStax does not have a supported native driver, the supported gRPC client library is now a great way to go.&lt;/p&gt;

&lt;h2 id=&quot;do-more-with-stargate-grpc&quot;&gt;Do more with Stargate gRPC&lt;/h2&gt;

&lt;p&gt;If your favorite language is not on our list, extending to a new language is not hard. From a protobuf file you get a skeleton of the CQL calls you need to make in your chosen language, and none of the operational overhead is required. You get that out of the box with gRPC, and it lives inside of Stargate where it belongs in a proper cloud-native context.&lt;/p&gt;

&lt;p&gt;Thanks to bidirectionality and efficient data serialization, you’ll now get performance on par with native drivers combined with the simplicity of a thin client library, all within a context that plays nicely with the rest of your microservices.&lt;/p&gt;

&lt;p&gt;To learn more, head over to &lt;a href=&quot;https://github.com/stargate&quot;&gt;Stargate’s Github&lt;/a&gt;. You can also find source code and examples on &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/gRPC-using.html&quot;&gt;using Stargate gRPC API clients&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-java-client&quot;&gt;Java client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-go-client&quot;&gt;Go client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-node-client&quot;&gt;Node.js client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate/stargate-grpc-rust-client&quot;&gt;Rust client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, lastly, welcome to the “No Drivers” future of Apache Cassandra.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stargate&quot;&gt;Stargate - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/gRPC-using.html&quot;&gt;Using Stargate gRPC API clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java&quot;&gt;Native Driver Alternatives Using Stargate gRPC API in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Stargate gRPC: The Better Way to CQL</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate v2 Update: Reaching the First Milestone</title><link href="https://stargate.io/2022/01/06/reaching-the-first-milestone.html" rel="alternate" type="text/html" title="Stargate v2 Update: Reaching the First Milestone" /><published>2022-01-06T06:00:00+00:00</published><updated>2022-01-06T06:00:00+00:00</updated><id>https://stargate.io/2022/01/06/reaching-the-first-milestone</id><content type="html" xml:base="https://stargate.io/2022/01/06/reaching-the-first-milestone.html">&lt;h1 id=&quot;stargate-v2-update-reaching-the-first-milestone&quot;&gt;Stargate v2 Update: Reaching the First Milestone&lt;/h1&gt;

&lt;p&gt;Back in November, we shared the goals of the &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;Stargate v2 release&lt;/a&gt; and our &lt;a href=&quot;https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html&quot;&gt;proposed design approach&lt;/a&gt;, and now it’s time for a progress check. To kick off 2022, the Stargate team is excited to provide an update on our first milestone in the continued development of Stargate v2.&lt;/p&gt;

&lt;p&gt;For this first milestone, we adopted a “steel thread” approach – our goal was to begin &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;breaking up the monolith&lt;/a&gt; by factoring a single API service out of the Stargate coordinator node – the REST API service. While the original v2 design referenced above includes the introduction of a new gRPC “Bridge” component, we elected to use the new gRPC API that was released in November 2021 as a placeholder for the Bridge in this first milestone, and defer starting work on the Bridge to the next milestone. This enabled us to work more quickly and focus on separating out the new service from the Coordinator Node. The result of what we built is shown in Figure 1 below:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/steel-thread-image.png&quot; alt=&quot;Figure 1: Summary of Stargate v2 Milestone 1 implementation.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 1: Summary of Stargate v2 Milestone 1 implementation.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can find our work on the new standalone REST API service on the &lt;a href=&quot;https://github.com/stargate/stargate/tree/v2.0.0&quot;&gt;v2.0.0 branch&lt;/a&gt; in the &lt;a href=&quot;https://github.com/stargate/stargate/tree/v2.0.0/sgv2-restapi&quot;&gt;sgv2-restapi module&lt;/a&gt;. While the new REST API service is not production-ready, at the time of writing it is passing over 90% of the integration tests for the REST v2 endpoints. In fact, the easiest way to see the new endpoint in action is to check out the v2.0.0 branch and run the integration test suite as described in the project &lt;a href=&quot;https://github.com/stargate/stargate/blob/v2.0.0/README.md&quot;&gt;README&lt;/a&gt;. We’re also working on ”Dockerizing” this configuration as well.&lt;/p&gt;

&lt;p&gt;We had some interesting learnings and design discussions that came up along the way. We captured a bunch of them in our retrospective, and then did some affinity mapping to identify common themes. In the sections below, we’ll cover some of the key points that emerged from this exercise.&lt;/p&gt;

&lt;h2 id=&quot;open-discussions&quot;&gt;Open discussions&lt;/h2&gt;

&lt;p&gt;One of our main goals for Stargate v2 has been to make it easier for new contributors to get involved. To help move things in that direction, we’ve started documenting design discussions and proposals via &lt;a href=&quot;https://github.com/stargate/stargate/discussions&quot;&gt;GitHub discussions&lt;/a&gt; instead of private Google docs so that the community can benefit and participate. In fact, we’ll link to some of those discussions in the sections below.&lt;/p&gt;

&lt;h2 id=&quot;rest-api-observations&quot;&gt;REST API observations&lt;/h2&gt;

&lt;p&gt;As we were planning Stargate v2, we decided to focus on the architectural refactoring over making improvements to the existing APIs, in order to move quickly and in order to preserve backward compatibility. However, as we worked to make sure the new REST API service worked the same as the existing Stargate v1 REST endpoint, we actually found a few defects and improvements, which we have been documenting in a &lt;a href=&quot;https://github.com/stargate/stargate/discussions/1501&quot;&gt;GitHub discussion&lt;/a&gt; and making equivalent fixes for both Stargate v1 and v2.&lt;/p&gt;

&lt;p&gt;As noted above, we have completed the implementation of the majority of the “REST v2” endpoints (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2/keyspaces…&lt;/code&gt;) in the new REST API Service. We did not prioritize implementation of the “REST v1” endpoints (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v1/keyspaces/…&lt;/code&gt;) and are investigating how widely used the v1 endpoints are in order to determine the level of interest in bringing those endpoints forward into Stargate v2. Please reach out on the &lt;a href=&quot;https://github.com/stargate/stargate/discussions/1528&quot;&gt;GitHub discussion&lt;/a&gt; if you have feedback on this.&lt;/p&gt;

&lt;h2 id=&quot;talking-to-coordinator-nodes-via-grpc&quot;&gt;Talking to coordinator nodes via gRPC&lt;/h2&gt;

&lt;p&gt;We were able to move quickly in implementing the new REST API service by using the new gRPC API exposed by the Stargate coordinator nodes. We’ve started to refer to the style of this interface as “CQL over gRPC” because the operations on the gRPC endpoint work in terms of providing CQL query strings and an array of parameters you wish to bind to the query string. We ended up creating a standalone query builder similar to the one available in the DataStax Java Driver in order to construct CQL strings that the standalone REST service could pass to the gRPC API. This work was not part of our original plan, but we hope it will make implementing subsequent services go more quickly.&lt;/p&gt;

&lt;h2 id=&quot;packaging-and-releasing-for-docker-and-kubernetes&quot;&gt;Packaging and releasing for Docker and Kubernetes&lt;/h2&gt;

&lt;p&gt;As mentioned above, we have an integration test configuration that launches the new REST API service alongside Stargate coordinator and Apache Cassandra&lt;strong&gt;®&lt;/strong&gt; nodes. We’re working on updated release processes so that we can have tagged releases for v2, associated Docker images, and example configurations for Docker Compose and Kubernetes.&lt;/p&gt;

&lt;p&gt;Since one of the Stargate v2 goals is to be more Docker/Kubernetes friendly, we’re also working on building Docker images as part of our regular Maven builds so we can make use of the images in local development for unit and integration testing. We’re looking at &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Google’s Jib&lt;/a&gt; as a possible option to replace our current process, which uses a separate &lt;a href=&quot;https://github.com/stargate/docker-images&quot;&gt;docker-images&lt;/a&gt; repo to build Docker images only after a release.&lt;/p&gt;

&lt;h2 id=&quot;whats-next-for-milestone-2&quot;&gt;What’s next for Milestone 2?&lt;/h2&gt;

&lt;p&gt;Now that we’ve mostly completed breaking our first API service out of the monolith, we’re working on setting up performance testing, reviewing the architecture, and getting ready to factor the GraphQL and Document APIs into their own services.&lt;/p&gt;

&lt;p&gt;We’d love to hear your inputs about the new architecture and the progress that is being made on the new implementation, so feel free to jump into the conversation on &lt;a href=&quot;https://discord.com/invite/5gY8GDB&quot;&gt;Discord&lt;/a&gt; with questions, or comment on our &lt;a href=&quot;https://github.com/stargate/stargate/discussions?discussions_q=label:stargate-v2&quot;&gt;design discussions on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to Tatu Saloranta, Olivier Michallat, Doug Wettlaufer and Mark Stone for their contributions to the Stargate v2 effort and this post.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Stargate v2 Update: Reaching the First Milestone</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing Github branch renaming change</title><link href="https://stargate.io/2021/12/14/announce-github-naming-change.html" rel="alternate" type="text/html" title="Announcing Github branch renaming change" /><published>2021-12-14T06:00:00+00:00</published><updated>2021-12-14T06:00:00+00:00</updated><id>https://stargate.io/2021/12/14/announce-github-naming-change</id><content type="html" xml:base="https://stargate.io/2021/12/14/announce-github-naming-change.html">&lt;p&gt;Starting in October 2020, all new source code repositories created on GitHub have a primary branch named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; as part of the company’s effort to remove unnecessary references to slavery and replace them with more inclusive terms. This “fix forward first” approach is the first step in making systemic changes to the naming conventions.&lt;/p&gt;

&lt;p&gt;Github will also gradually rename their own internal repositories over time. This reflects the difficulty that Github and other organizations face – it’s hard to rename something that is in active use.&lt;/p&gt;

&lt;p&gt;Hard, but not impossible, and it’s the right thing to do. We at the Stargate project are following suit. We’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; as the name of our primary branch going forward, and we are actively renaming existing primary branches to be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. The Docs repo is the first to get renamed. Others will follow. We can’t let inertia be an impediment. We want our work on Stargate to be open, transparent, and inclusive. This is a necessary step to align with the virtue of inclusivity.&lt;/p&gt;</content><author><name></name></author><summary type="html">Starting in October 2020, all new source code repositories created on GitHub have a primary branch named main instead of master as part of the company’s effort to remove unnecessary references to slavery and replace them with more inclusive terms. This “fix forward first” approach is the first step in making systemic changes to the naming conventions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Native Driver Alternatives Using Stargate gRPC API in Java</title><link href="https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java.html" rel="alternate" type="text/html" title="Native Driver Alternatives Using Stargate gRPC API in Java" /><published>2021-11-29T06:00:00+00:00</published><updated>2021-11-29T06:00:00+00:00</updated><id>https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java</id><content type="html" xml:base="https://stargate.io/2021/11/29/native-driver-alternatives-using-stargate-grpc-api-in-java.html">&lt;p&gt;Developers should be able to build highly scalable apps even when they call multilingual and multi-cloud microservices. That’s why the Stargate team recently made a new API generally available to help developers build applications with their preferred language.&lt;/p&gt;

&lt;p&gt;The new API is called &lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;gRPC Remote Procedure Call&lt;/a&gt; (gRPC), and we built it on the framework created by Google. In this post, we’ll show you how easy it is to start using this API from the Java ecosystem. We’ll also explain the basic methods exposed to the clients that allow us to interact with the gRPC API.&lt;/p&gt;

&lt;p&gt;The setup is simple. The generated code based on protobuf files (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query.proto&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stargate.proto&lt;/code&gt;) is shipped with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency. In your client application, you only need to add two dependencies, the client and a functional channel service provider. In this example we picked netty:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.stargate.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-proto&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.40&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-netty-shaded&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.40.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-netty-shaded&lt;/code&gt;, you’ll get the following error:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No functional channel service provider found. Try adding a dependency on the grpc-okhttp, grpc-netty, or grpc-netty-shaded artifact.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have all the needed dependencies we should be able to use the Stargate gRPC-stub API.&lt;/p&gt;

&lt;p&gt;After this step, you should have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; available on your classpath from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency. It contains the logic for interacting with Stargate gRPC API.&lt;/p&gt;

&lt;h2 id=&quot;putting-the-stargate-grpc-api-to-use&quot;&gt;Putting the Stargate gRPC API to use&lt;/h2&gt;

&lt;p&gt;Once we have the generated code with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; class shipped within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grpc-proto&lt;/code&gt; dependency, we’re ready to create the client.&lt;/p&gt;

&lt;p&gt;Before delving into the code, we need to generate the auth token that will be used to perform authorization. Please visit the &lt;a href=&quot;https://dtsx.io/3csSw47&quot;&gt;Stargate Authz documentation&lt;/a&gt; for a guide on this. Here’s some code that will work for our needs:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'localhost:8081/v1/auth'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;username&quot;: &quot;cassandra&quot;,
    &quot;password&quot;: &quot;cassandra&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this snippet, we’re assuming that Stargate is running on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8081&lt;/code&gt;. Once we have that, we can connect to the gRPC API. First, we need to generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt; that is used to perform the connection:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedChannel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedChannelBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usePlaintext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usePlaintext()&lt;/code&gt; should only be used for development and testing. When used in a production environment it should use a load balancer that terminates transport layer security (TLS). For local development of Stargate, it will be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ManagedChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8090&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we can generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StargateGrpc&lt;/code&gt; stub. There are two ways of interacting with the gRPC API. The first one is synchronous (blocking):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.grpc.StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StargateBlockingStub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBlockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withCallCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token-value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second way of interacting is asynchronous (non-blocking):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StargateStub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withCallCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StargateBearerToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token-value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will focus on the blocking approach in this example since it is simpler to illustrate. Please be aware that for your use case you might need to use the second approach.&lt;/p&gt;

&lt;p&gt;We need to set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CallCredentials&lt;/code&gt;, using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token-value&lt;/code&gt; generated in the previous step. We will assume that all queries are executed within the existing keyspace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks&lt;/code&gt; and table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;. The table definition is as follows:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Stargate gRPC API provides a way to execute two types of queries: Standard CQL queries and batch queries containing N CQL queries.&lt;/p&gt;

&lt;h2 id=&quot;build-and-execute-a-standard-query-with-the-grpc-api&quot;&gt;Build and execute a standard query with the gRPC API&lt;/h2&gt;

&lt;p&gt;When we want to run a standard query we can start by inserting a record using the gRPC stub:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.proto.QueryOuterClass.Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.stargate.proto.QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('a', 1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will build and execute a single query. Next, we can retrieve the inserted record(s):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT k, v FROM ks.test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we print out the result set, it will have the following structure:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result_set &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  data &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    type_url: &lt;span class=&quot;s2&quot;&gt;&quot;type.googleapis.com/stargate.ResultSet&quot;&lt;/span&gt;
    value: &lt;span class=&quot;s2&quot;&gt;&quot;some_binary_data&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The value contains the binary data, that we can deserialize. First, we need to unwrap the result set:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it will return value for k = &quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it will return value for v = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can get all rows with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRowsList()&lt;/code&gt; method and iterate over the result or get the specific row using its index and pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRows(int index)&lt;/code&gt; method. We picked the latter approach in the example above.&lt;/p&gt;

&lt;p&gt;Our retrieval query (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT k, v FROM ks.test&lt;/code&gt;) stated explicitly which columns should be retrieved. Because of that, we can safely get the values using their positions via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getValues()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getString()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getInt()&lt;/code&gt; perform deserialization of data. These methods were used because we knew the underlying type of the corresponding columns. The API provides utility methods for deserialization for more types as well. For the full list of available types, see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; section in the &lt;a href=&quot;https://dtsx.io/3nxrgYI&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query.proto&lt;/code&gt;&lt;/a&gt; file. If you want to iterate over all results, you can with this snippet:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Row&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;row:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRowsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValuesList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will allow you to operate on a single row. When you execute it, you’ll get the following:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;string: &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
, int: 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-batch-queries-with-stargate-grpc-api&quot;&gt;Run Batch queries with Stargate gRPC API&lt;/h2&gt;

&lt;p&gt;In case we want to execute N queries, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executeBatch&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockingStub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeBatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;               
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('a', 1)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; 
             &lt;span class=&quot;nc&quot;&gt;QueryOuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO ks.test (k, v) VALUES ('b', 2)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This takes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; as an argument. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; can contain N queries of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;. We are adding two queries via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addQueries&lt;/code&gt; method. You can learn more about handling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Batch&lt;/code&gt; request in the &lt;a href=&quot;https://dtsx.io/3cs7doc&quot;&gt;Batch Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you know how to integrate the gRPC client via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockingStub&lt;/code&gt;. If you want to dive deeper into it take a look at the &lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;Java Client documentation on gRPC&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3qTlaUL&quot;&gt;Join the Stargate community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2Z2nCfU&quot;&gt;Using Stargate gRPC API clients for Rust, Go and Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Developers should be able to build highly scalable apps even when they call multilingual and multi-cloud microservices. That’s why the Stargate team recently made a new API generally available to help developers build applications with their preferred language.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing Stargate v2</title><link href="https://stargate.io/2021/11/02/announcing-stargate-v2.html" rel="alternate" type="text/html" title="Announcing Stargate v2" /><published>2021-11-02T06:00:00+00:00</published><updated>2021-11-02T06:00:00+00:00</updated><id>https://stargate.io/2021/11/02/announcing-stargate-v2</id><content type="html" xml:base="https://stargate.io/2021/11/02/announcing-stargate-v2.html">&lt;p&gt;After a year of adding new APIs and features, we realized that this is an ideal time to take a step back and look at the overall architecture of &lt;a href=&quot;https://dtsx.io/3jNJGlR&quot;&gt;Stargate&lt;/a&gt;. We’re listening to feedback from the &lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate developer community&lt;/a&gt; and taking a look at our technical debt as well. Based on your inputs, we’ve begun some planning for a “Stargate v2” and have identified the following high-level goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Breaking up the monolith&lt;/li&gt;
  &lt;li&gt;Improving developer experience for contributors&lt;/li&gt;
  &lt;li&gt;Making Stargate more cloud-friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll expand on these goals below, but first, let’s take a look at how we reached this point.&lt;/p&gt;

&lt;h2 id=&quot;stargate-a-brief-history&quot;&gt;Stargate: a brief history&lt;/h2&gt;

&lt;p&gt;In September 2020 we &lt;a href=&quot;https://dtsx.io/3jQRa7D&quot;&gt;announced the Stargate project&lt;/a&gt; as an open-source data gateway. Our goal was to help speed up application development and reduce the workload for teams that find themselves creating and maintaining layers of microservice APIs on top of databases like &lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;Apache Cassandra®&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since that first release, which included support for CQL and REST APIs, the project has seen a number of milestones since then. Here are a few of the highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3EsZUsp&quot;&gt;GraphQL API&lt;/a&gt; and the &lt;a href=&quot;https://dtsx.io/3blyRCT&quot;&gt;Document API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2Y0PNLU&quot;&gt;1.0 milestone&lt;/a&gt; with capabilities for Real Quick Note First and Posts in TikTok.&lt;/li&gt;
  &lt;li&gt;Support for &lt;a href=&quot;https://dtsx.io/3pTsDT5&quot;&gt;Cassandra 4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://dtsx.io/3BGrHDV&quot;&gt;API access to DataStax Astra DB via Stargate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This represents a lot of change for a project that’s just over a year old, and now it’s time for us to set the stage for this open-source community to grow even more.&lt;/p&gt;

&lt;h2 id=&quot;breaking-up-the-monolith&quot;&gt;Breaking up the monolith&lt;/h2&gt;

&lt;p&gt;The current Stargate design is monolithic. Each Stargate node runs as a single process containing all of the supported APIs. This has a few consequences for deploying and running Stargate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;All of the APIs are enabled by default. You could run your own version with individual APIs disabled, but not by using the official Stargate Docker images. Instead, you’d have to download and build the Stargate source and selectively omit specific OSGI bundles from the startup script. This isn’t intuitive and requires knowledge of the existing bundles (more on OSGI below).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s not possible to scale the individual APIs. If you’re primarily using the REST API and need to scale up to meet increased REST traffic, you can’t just scale up REST independently. Instead, you have to add additional Stargate nodes supporting all the APIs to meet the demand. The nodes are “heavier” than they need to be, leading to inefficient resource usage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Today, extending Stargate with a new API requires creating a new module. (adding the module’s JAR files to the existing stargate-lib directory, then packaging all the JAR files, and configuration up for deployment.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the current design makes Stargate more difficult for both users and contributors, and it’s time to break up this monolith to improve the experience for everyone.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-developer-experience-for-users&quot;&gt;Improving the developer experience for users&lt;/h2&gt;

&lt;p&gt;As you’d expect, we absolutely want the &lt;a href=&quot;https://dtsx.io/3wdUGhp&quot;&gt;Stargate APIs&lt;/a&gt; to be as easy to use and adopt as possible, but our goals for v2 are specifically focused on making Stargate easy to deploy and manage, rather than on making API revisions.&lt;/p&gt;

&lt;p&gt;Stargate v2 will move the API implementations out of the Stargate node (aka “monolith”) into separate microservices. This will allow you to scale each API independently. You can even disable APIs that you don’t intend to use entirely, allowing you to focus on a smaller surface area of the project and giving you fewer endpoints to secure.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-developer-experience-for-contributors&quot;&gt;Improving the developer experience for contributors&lt;/h2&gt;

&lt;p&gt;We’re also committed to growing the community of open source developers who are actively contributing code to Stargate. For this reason, another major goal of v2 is to make the implementation itself easier to understand, debug, enhance, and extend.&lt;/p&gt;

&lt;h3 id=&quot;removing-osgi&quot;&gt;Removing OSGI&lt;/h3&gt;

&lt;p&gt;The original Stargate (“v1”) has a pluggable design, using the &lt;a href=&quot;https://www.osgi.org/&quot;&gt;OSGI framework&lt;/a&gt; to allow different modules to be composed at deployment time. This is useful for swapping in different Cassandra persistence modules, such as Cassandra 3.11, 4.0, and DataStax Enterprise 6.8. We chose OSGI because it’s a proven technology that provided us with the plugin framework we needed to iterate quickly.&lt;/p&gt;

&lt;p&gt;However, OSGI isn’t widely used these days, and several developers have reported that debugging can be difficult due to the nuances of working with OSGI. The move to microservices will help reduce the need for OSGI, and we’ll work toward replacing the remaining usage with another solution.&lt;/p&gt;

&lt;h3 id=&quot;encouraging-modernization-and-innovation&quot;&gt;Encouraging modernization and innovation&lt;/h3&gt;

&lt;p&gt;The current requirement to support a Cassandra 3.11 persistence layer means that the Stargate nodes must run Java 8 — the lowest common denominator. Unfortunately, this has prevented the usage of more modern Java frameworks, such as Quarkus or Micronaut that require later Java versions.&lt;/p&gt;

&lt;p&gt;We believe that one of the great benefits of breaking up the monolith will be to encourage innovation in the Stargate community. The v2 architecture will be more conducive to external contributions since the developer of each microservice will be able to make their own choices about what language and frameworks to use. This has the dual benefit of both modernizing Stargate and potentially attracting contributors who are interested in working with new and exciting frameworks or languages.&lt;/p&gt;

&lt;h3 id=&quot;refactoring-and-cleanup&quot;&gt;Refactoring and cleanup&lt;/h3&gt;

&lt;p&gt;As with any project that has many contributors, the codebase has started to show some entropy. Although it’s nowhere near “spaghetti code” state, the modules and Java package structure could use some refactoring. We’re hoping to clean up some dependencies and improve the overall code organization to make it easier for you to find your way around.&lt;/p&gt;

&lt;h2 id=&quot;making-stargate-more-cloud-friendly&quot;&gt;Making Stargate more cloud-friendly&lt;/h2&gt;

&lt;p&gt;While the Stargate project currently provides &lt;a href=&quot;https://dtsx.io/3myshiV&quot;&gt;Docker images&lt;/a&gt; that can be used for deployment in containerized environments, Stargate v2 is going to add additional images for the various microservices. This will add some complexity to deployments.&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; has emerged as the clear choice for container orchestration in both public and private clouds, v2 will provide assistance in deploying Stargate on Kubernetes via Helm. We envision providing a Helm chart to expose each enabled API as a Kubernetes Service, use Deployments to manage replicas of the API implementations, create a StatefulSet to manage the persistence nodes, and so on.&lt;/p&gt;

&lt;p&gt;On another note, we look forward to continuing our collaboration with the &lt;a href=&quot;https://dtsx.io/3Erl8Xr&quot;&gt;K8ssandra&lt;/a&gt; project, which provides deployments of Stargate and Cassandra on Kubernetes. The K8ssandra team is also building a &lt;a href=&quot;https://dtsx.io/3vYmeqJ&quot;&gt;Stargate Controller&lt;/a&gt; as part of the &lt;a href=&quot;https://github.com/k8ssandra/k8ssandra-operator&quot;&gt;K8ssandra Operator&lt;/a&gt; for their own v2 release.&lt;/p&gt;

&lt;h2 id=&quot;the-journey-to-v2-is-just-beginning&quot;&gt;The journey to V2 is just beginning&lt;/h2&gt;

&lt;p&gt;We’re just getting started on working toward a Stargate v2 release and are committed to sharing our plans and progress early and often. We’d love to get as much input as possible from the &lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate open source community&lt;/a&gt;. In our next blog post, we’ll introduce a proposed design for Stargate v2, other design options we considered, and share how you can provide feedback on the proposal.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3jNJGlR&quot;&gt;Stargate.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3bsmhS4&quot;&gt;Stargate Community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3pTsDT5&quot;&gt;Stargate and Cassandra 4.0 - Better Together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3wdUGhp&quot;&gt;Stargate APIs - GraphQL, REST, Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3Erl8Xr&quot;&gt;K8ssandra - K8ssandra, Apache Cassandra® on Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">After a year of adding new APIs and features, we realized that this is an ideal time to take a step back and look at the overall architecture of Stargate. We’re listening to feedback from the Stargate developer community and taking a look at our technical debt as well. Based on your inputs, we’ve begun some planning for a “Stargate v2” and have identified the following high-level goals:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing the Design for Stargate v2</title><link href="https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html" rel="alternate" type="text/html" title="Introducing the Design for Stargate v2" /><published>2021-11-02T06:00:00+00:00</published><updated>2021-11-02T06:00:00+00:00</updated><id>https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2</id><content type="html" xml:base="https://stargate.io/2021/11/02/introducing-the-design-for-stargate-v2.html">&lt;p&gt;When we &lt;a href=&quot;https://stargate.io/2021/11/02/announcing-stargate-v2.html&quot;&gt;announced Stargate v2&lt;/a&gt;, we mainly focused on the “why” behind the change. In this post, we’ll dive into the “how.”&lt;/p&gt;

&lt;p&gt;Like all things in software engineering, arriving at this point was an iterative process. We’ll show you some of the designs we considered before landing on the one we propose today.&lt;/p&gt;

&lt;p&gt;For context, we had a few different criteria in mind while reviewing each of these designs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ease of contribution:&lt;/strong&gt; We wanted to make sure that whatever change we made resulted in it being easier for both new and existing contributors to work with &lt;a href=&quot;https://dtsx.io/3w732Y9&quot;&gt;Stargate&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment flexibility:&lt;/strong&gt; The ability to scale components independently was important to us, but we recognize that not everyone will need this and would instead prefer only one or two containers running.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ongoing performance:&lt;/strong&gt; Of course, we also wanted to be sure that neither of the above changes came at the cost of latency, so we also wanted to ensure that the potential design would still be performant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that said, let’s get into the designs.&lt;/p&gt;

&lt;h2 id=&quot;considered-designs&quot;&gt;Considered designs&lt;/h2&gt;

&lt;p&gt;Not every idea can be a winner, and we abandoned our fair share of ideas during this design process. Here we’ll discuss some of these runners-up and explain why they didn’t make the cut. All of them share one thing in common: they assume deployment on &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;design-1-separate-everything&quot;&gt;Design 1: Separate everything&lt;/h3&gt;

&lt;p&gt;One of our ideas was to go in the opposite direction of where Stargate is currently. In this design, we’d switch from a “shared everything” approach to a “shared nothing.” Instead of everything running within the same JVM and connected using &lt;a href=&quot;https://www.osgi.org/&quot;&gt;OSGi&lt;/a&gt;, each component of Stargate would be its own .jar capable of running in a dedicated container. The diagram below illustrates what this new architecture would look like.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-shared-nothing.png&quot; alt=&quot;Figure 1: Diagram of our proposed 'shared nothing' design for Stargate v2.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 1: Diagram of our proposed 'shared nothing' design for Stargate v2.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From left to right, here’s how it would work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A request would come in through the load balancer and then be routed to the proper user-facing service based on routing rules.&lt;/li&gt;
  &lt;li&gt;Each service would be responsible for transforming its request into a gRPC payload that it would pass on to an internal gRPC (i.e. the “Bridge”).&lt;/li&gt;
  &lt;li&gt;The Bridge would apply all cross-cutting concerns, like authentication and authorization, before passing the request along to the persistence service again over gRPC.&lt;/li&gt;
  &lt;li&gt;Finally, the persistence would take the gRPC payload and transform it into CQL that could be processed and coordinated to the underlying storage nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One benefit of this approach is that it provides flexibility for scaling and deployment. For example, if you don’t need the REST API then you would have the option to not deploy that pod. Likewise, for scaling, if you had more &lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;GraphQL&lt;/a&gt; traffic than &lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;Document API&lt;/a&gt;, you could add more GraphQL pods without changing the other deployments.&lt;/p&gt;

&lt;p&gt;An immediate downside to this approach was for CQL, since those requests would need to be transformed from CQL frames to gRPC and then back to CQL. Given CQL’s latency-sensitive nature, we felt the additional overhead of multiple serialization and deserialization would be unacceptable.&lt;/p&gt;

&lt;p&gt;Furthermore, this approach would require creating a new schema definition language to transport the requests between services. Although this would certainly be helpful for services that operate at a higher level than plain CQL (like the Documents API), we thought it was unnecessarily complex.&lt;/p&gt;

&lt;h3 id=&quot;design-2-using-cql-to-communicate&quot;&gt;Design 2: Using CQL to communicate&lt;/h3&gt;

&lt;p&gt;The next option we considered was similar to the “shared nothing” design, but differed in that it used CQL as the communication protocol.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-cql-shared-nothing.png&quot; alt=&quot;Figure 2: Diagram of a 'shared nothing' approach using CQL to communicate.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 2: Diagram of a 'shared nothing' approach using CQL to communicate.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this design both the CQL and persistence services would share the same container to reduce CQL latency, but the other services would be separated. For communication, each service would accept its request and then transform it into a CQL statement, which could be sent back to the CQL service via a driver.&lt;/p&gt;

&lt;p&gt;This seemed like a promising approach since all of the current services are written in Java, which has a robust CQL driver. Except for the requirement of a driver introduces three potential issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stargate is written in Java, but we welcome the possibility of services being written in other languages. Although this means your language of choice would need a driver, and if it has a driver, it needs to be in a usable state.&lt;/li&gt;
  &lt;li&gt;Having a driver bridge the communication gap between user-facing service and persistence creates some authentication issues. Since drivers tend to be session-scoped with a username and password, each service would need to create a new session for each request. Alternatively, there would need to be a system user for the services, which would then need to execute the queries on behalf of the user initiating the request.&lt;/li&gt;
  &lt;li&gt;Even though most of the services are a one-to-one translation to CQL, there are occasions when this isn’t the case, so it would require making several requests from the service to persistence.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;design-3-multiple-bridges&quot;&gt;Design 3: Multiple bridges&lt;/h3&gt;

&lt;p&gt;One of our next ideas was a hybrid of the previous two. In this design, the simpler services that map more readily to CQL would take one path to the persistence service, while the others would take a different path.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-multibridge.png&quot; alt=&quot;Figure 3: Diagram of a hybrid approach for Stargate v2 using multiple bridges.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 3: Diagram of a hybrid approach for Stargate v2 using multiple bridges.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown in the diagram above, we have now gone from one to two Bridge pods and split up the GraphQL service. At the top half of the diagram, things have stayed largely the same in that services that map cleanly to CQL transform their requests into a gRPC payload and then pass that to the Bridge. Where this diverges is the “not directly CQL” services, which now go through a different Bridge that translates the requests into something lower-level before passing them along to the primary Bridge service.&lt;/p&gt;

&lt;p&gt;One of the benefits of this design is that it removes the complexity of translating requests into gRPC from the external services and pushes it down into a centralized location. The translation Bridge can take the customized requests from both the Documents API and the schema-first version of GraphQL and transform them into simpler gRPC payloads that the inner Bridge service can process.&lt;/p&gt;

&lt;p&gt;That being said, this design still suffers from the same downside of the previous design where it has several layers of translation and adds yet another layer for two of the services.&lt;/p&gt;

&lt;h2 id=&quot;meet-the-winning-design&quot;&gt;Meet the winning design&lt;/h2&gt;

&lt;p&gt;After weighing the pros and cons of the other potential designs, we finally settled on what we believe is the best option for Stargate v2. Take a look at the diagram below.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/assets/images/stargate-v2-services.png&quot; alt=&quot;Figure 4: Diagram of the final design approach for Stargate v2.&quot; /&gt;
  &lt;figcaption style=&quot;text-align: center;&quot;&gt;Figure 4: Diagram of the final design approach for Stargate v2.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This design is similar to the earlier ones where the user-facing services are sitting behind a load balancer and communicating with the persistence service via gRPC. Although a noticeable feature is the addition of a “Coordinator Node.” This new Coordinator Node pod will contain three different services that run together in the same JVM: CQL, Bridge, and Persistence.&lt;/p&gt;

&lt;p&gt;Next, we’ll briefly explain how the services involved in this design will work.&lt;/p&gt;

&lt;h3 id=&quot;services&quot;&gt;Services&lt;/h3&gt;

&lt;p&gt;The services component of Stargate will be composed of the discrete, user-facing services running as independent pods. Each service will be responsible for serving requests on its respective interface by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Accepting requests&lt;/li&gt;
  &lt;li&gt;Transforming them into CQL&lt;/li&gt;
  &lt;li&gt;Passing them along to the Bridge via a gRPC request&lt;/li&gt;
  &lt;li&gt;Transforming the gRPC response back into its format (like JSON or GraphQL) and returning the payload to the user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;REST, GraphQL, and gRPC continue to convert their respective request types into CQL strings. The Bridge will then pass the CQL string to the persistence service for the query to be executed. Going through the intermediate gRPC provides the services with a gRPC interface (rather than relying on drivers) and takes advantage of cross-cutting functionality provided by the Bridge.&lt;/p&gt;

&lt;h3 id=&quot;bridge&quot;&gt;Bridge&lt;/h3&gt;

&lt;p&gt;The Bridge will be a gRPC service that connects the various user-facing services with the persistence service. Its responsibilities will be to accept gRPC requests while performing authentication and authorization.&lt;/p&gt;

&lt;p&gt;This service will be implemented in almost the same manner as the user-facing gRPC. This service will live within the same JVM as the persistence service and support cross-cutting concerns, such as: authentication and authorization, pluggable request/response filters (e.g. encryption, data masking), and metrics.&lt;/p&gt;

&lt;p&gt;As a cross-cutting concern, it makes sense to push authentication and authorization into this layer rather than expecting each service to reimplement the same functionality.&lt;/p&gt;

&lt;h3 id=&quot;cql-service&quot;&gt;CQL Service&lt;/h3&gt;

&lt;p&gt;The CQL service will continue to function in the same way it does today. It‘ll be considered part of the Coordinator Node and live within the same JVM as the persistence service and Bridge. Since it’s part of the Bridge, it’ll also take advantage of the same cross-cutting libraries as the Bridge.&lt;/p&gt;

&lt;h3 id=&quot;persistence&quot;&gt;Persistence&lt;/h3&gt;

&lt;p&gt;There won’t be much difference in the persistence services that Stargate currently offers. They’ll still operate as coordinators and keep all their existing functionality. The primary changes will just be cosmetic, like removing OSGi (if necessary).&lt;/p&gt;

&lt;p&gt;The Bridge will be packaged within each Persistence layer to produce deployable containers for each supported backend (C* 4.0, DSE 6.8, etc.).&lt;/p&gt;

&lt;h3 id=&quot;rest-graphql-and-grpc-services&quot;&gt;REST, GraphQL, and gRPC services&lt;/h3&gt;

&lt;p&gt;The current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; module will be refactored to a separate microservice that uses the internal gRPC API of the Bridge. Dependence on OSGI will be removed — although we’ll likely reuse the health checker module for this and the other HTTP-based API services to provide endpoints for liveness/readiness.&lt;/p&gt;

&lt;p&gt;The REST API service will continue to support both the REST v1 and v2 APIs as there’ll be no API contract changes. The current GraphQL and gRPC API implementations will be factored out from their current places into separate microservices that use the internal gRPC API, and we’ll remove the dependence on OSGI.&lt;/p&gt;

&lt;h3 id=&quot;document-api-service&quot;&gt;Document API service&lt;/h3&gt;

&lt;p&gt;The current Document API implementation will be moved from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest-api&lt;/code&gt; module into a separate microservice that uses the internal gRPC API. Dependence on OSGI will also be removed.&lt;/p&gt;

&lt;p&gt;Because the Document API operates at a higher level than REST or GraphQL, it won’t follow the same pattern as those two services. Instead, it’ll need to either pull back more data than it needs and perform filtering on its side or send a different sort of payload to the Bridge, which is then interpreted and executed. An example of this payload would be an OR query. Both sides have their benefits. By pulling back more data than necessary reduces the complexity of the Bridge and moves the resource penalty (high memory usage) to the Document API service.&lt;/p&gt;

&lt;p&gt;On the other hand, if we were to handle this on the Coordinator Node side we would then be able to reuse this functionality in other services. An application of this would be to add ORs or JOINs to GraphQL. We’ll resolve this question based on further testing as we progress.&lt;/p&gt;

&lt;h3 id=&quot;load-balancing-authentication-and-other-cross-cutting-concerns&quot;&gt;Load balancing, authentication, and other cross-cutting concerns&lt;/h3&gt;

&lt;p&gt;We don’t assume usage of any particular ingress but encourage its use. The intent is to be compatible with whatever load balancer is used, be it Nginx, Envoy, or HAProxy.&lt;/p&gt;

&lt;p&gt;For HTTP services we could move some of the cross-cutting functionality into a load balancer by exposing endpoints for rate limiting and ext_authz. But we would then leave it up to each user to implement this for their particular load balancer (assuming that their load balancer supports that functionality). For CQL, we still need to implement this logic within Stargate since load balancers wouldn’t be able to act on the binary protocol.&lt;/p&gt;

&lt;p&gt;Authentication and authorization will continue to be pluggable as it is today. Although we include some base implementations, it’ll still be possible to support other methods by implementing the necessary interface.&lt;/p&gt;

&lt;h2 id=&quot;deployment-considerations&quot;&gt;Deployment considerations&lt;/h2&gt;

&lt;p&gt;Breaking apart Stargate will require changes to how it’s deployed, meaning we’ll need to create a Helm chart. As we iterate, this chart can become more advanced and allow for a more customizable deployment (e.g. just REST or some other subset of services).&lt;/p&gt;

&lt;p&gt;In the base case, the chart will deploy each of the user-facing services as a separate pod in addition to the Coordinator Node pod (persistence, CQL, and Bridge). For resource-constrained environments, where there’s a sensitivity to the number of pods, various combinations of pods and containers are possible. For one, it could maintain the same setup as exists today by placing all of the containers in a single pod. Another setup could be two pods: one for the Coordinator Node and another for the services.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;We believe that the changes proposed in this design will lead to a much better experience for those who contribute to the Stargate project and those who run it to support their other applications.&lt;/p&gt;

&lt;p&gt;Contributors will be able to quickly iterate on just the parts of the project they want without needing to understand as deeply the other components. Plus, it’ll open up the potential for newer Java versions and frameworks rather than Java 8 with OSGi or even a polyglot environment. Meanwhile, operators will have greater flexibility over their Stargate deployment and the potential for a lower-resource footprint when scaling to handle higher loads.&lt;/p&gt;

&lt;p&gt;Overall, we’re excited about these new changes and look forward to working with the &lt;a href=&quot;https://dtsx.io/3pMAp0Y&quot;&gt;Stargate community&lt;/a&gt; to make this new design a reality. On that note, if you want to review this design and give us your feedback, &lt;a href=&quot;https://dtsx.io/2ZQoJQ4&quot;&gt;join the discussion on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3w732Y9&quot;&gt;Stargate.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2021/11/01/announcing-stargate-v2.html&quot;&gt;Announcing Stargate v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3pMAp0Y&quot;&gt;Stargate Community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/2ZQoJQ4&quot;&gt;Stargate v2 discussion on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2020/10/05/hello-graphql.html&quot;&gt;Blog: Hello GraphQL: meet Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html&quot;&gt;Blog: The Stargate Cassandra Documents API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3CoHWXf&quot;&gt;Stargate Document API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3moyxcN&quot;&gt;Stargate REST API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3BpaA9p&quot;&gt;Stargate GraphQL API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dtsx.io/3mnCcrp&quot;&gt;Stargate CQL API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">When we announced Stargate v2, we mainly focused on the “why” behind the change. In this post, we’ll dive into the “how.”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stargate and Cassandra 4.0 - Better Together</title><link href="https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together.html" rel="alternate" type="text/html" title="Stargate and Cassandra 4.0 - Better Together" /><published>2021-07-28T06:00:00+00:00</published><updated>2021-07-28T06:00:00+00:00</updated><id>https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together</id><content type="html" xml:base="https://stargate.io/2021/07/28/stargate-and-cassandra-40-better-together.html">&lt;p&gt;Six years in the making, Apache Cassandra has reached its 4.0 GA release. This is a big milestone for one of the most important open source projects, and a significant step forward in the world of NoSQL and Fast Data.&lt;/p&gt;

&lt;h2 id=&quot;highlights-in-40&quot;&gt;Highlights in 4.0&lt;/h2&gt;

&lt;p&gt;This new release brings a lot of exciting features to Apache Cassandra. A few highlights include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 11 support;&lt;/li&gt;
  &lt;li&gt;Virtual tables;&lt;/li&gt;
  &lt;li&gt;Improved streaming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the full list head over to the &lt;a href=&quot;https://cassandra.apache.org/doc/latest/new/&quot;&gt;official Apache Cassandra docs&lt;/a&gt;. After reading over everything Cassandra 4.0 brings to the table you might be wondering, “What more could I need?”. Well, that’s where Stargate comes in.&lt;/p&gt;

&lt;h2 id=&quot;what-is-stargate&quot;&gt;What Is Stargate?&lt;/h2&gt;

&lt;p&gt;Stargate is a data gateway providing a multi-model set of APIs through which to interact with your Cassandra database. DataStax runs Stargate as part of &lt;a href=&quot;https://www.datastax.com/products/datastax-astra&quot;&gt;Astra DB&lt;/a&gt;, and Stargate can also be deployed on prem with DataStax Enterprise. And of course Stargate is an open source project in its own right that works with open source Apache Cassandra.&lt;/p&gt;

&lt;p&gt;So why does Stargate matter to developers, and to the Cassandra community?&lt;/p&gt;

&lt;h3 id=&quot;focus-on-what-you-care-about&quot;&gt;Focus On What You Care About&lt;/h3&gt;

&lt;p&gt;For many developers a database is simply a means to an end. We spend our days trying to rapidly deliver incredible applications to benefit our users. Applications typically require some form of data persistence. This may mean direct database access with a driver of some sort but others would rather have an API that allows them to think about and interact with their data in a more familiar vernacular. At this point we’re typically left to either spin up yet another data service or add a new endpoint to our already growing data proxy. But now there’s another option, Stargate.&lt;/p&gt;

&lt;p&gt;When we say Stargate is multi-model, this is the problem we’re solving. Whatever a developer’s preferred API for data interactions, Stargate offers a single gateway to support that API. Rather than incurring the cost of supporting an ancillary service in order to expose, say, a new GraphQL API to interact with your data you can instead install Stargate as part of your Cassandra cluster leaving more time to focus on what you really care about, your users.&lt;/p&gt;

&lt;h3 id=&quot;any-way-you-want-it&quot;&gt;Any Way You Want It&lt;/h3&gt;

&lt;p&gt;As discussed in our &lt;a href=&quot;https://stargate.io/2020/09/14/init-stargate.html&quot;&gt;previous blog&lt;/a&gt;, Stargate is an “open source data gateway” that provides multiple APIs for interacting with your data in a familiar and secure manner. You could grab the Cassandra driver for the language of your choice and start developing from there (an option completely supported by Stargate), and now you can also choose one of the APIs supported by Stargate that you’re already familiar with such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REST&lt;/li&gt;
  &lt;li&gt;Documents API&lt;/li&gt;
  &lt;li&gt;GraphQL&lt;/li&gt;
  &lt;li&gt;gRPC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The REST API in Stargate enables you to work with your data in a RESTful format. It exposes a complete CRUD interface for your entire data lifecycle, from schema creation to data manipulation and retrieval. Additionally, there is the Documents API that allows for data management in a schemaless manner which allows for fast iteration without worrying about data modeling. See &lt;a href=&quot;https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html&quot;&gt;this blog article&lt;/a&gt; for a deeper dive into the Documents API. Aside from the more traditional, RESTful interfaces there is also the GraphQL API. This API allows you to interact with your data in either a &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/graphql-using.html&quot;&gt;cql-first&lt;/a&gt; or &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/graphql-first-using.html&quot;&gt;schema-first&lt;/a&gt; manner. This new schema-first version is a reimagining of the original cql-first API and provides a more GraphQL native interface that should be familiar to any GraphQL developer. Finally, there is the gRPC API currently in alpha. This new API brings with it all of the existing gRPC and HTTP/2 benefits while still accepting the CQL you’re used to.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Now that we’ve highlighted how Stargate can make Cassandra 4.0 even easier to work with, it’s time to give it a spin. Starting with v1.0.31 &lt;a href=&quot;https://hub.docker.com/r/stargateio/stargate-4_0&quot;&gt;Stargate Docker images&lt;/a&gt; will support Cassandra 4.0 GA versions and beyond. Check out &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/install/install_cass_40.html&quot;&gt;our docs&lt;/a&gt; and &lt;a href=&quot;https://github.com/stargate/docker-images/tree/master/cassandra-4.0&quot;&gt;examples&lt;/a&gt; for simple getting started instructions.&lt;/p&gt;

&lt;h2 id=&quot;what-40-means-for-stargate&quot;&gt;What 4.0 Means for Stargate&lt;/h2&gt;

&lt;p&gt;Since pre-v1.0 Stargate we’ve supported Apache Cassandra 4.0. We’ve been there for alphas, betas, and release candidates but today we’re happy to announce that Stargate supports the official Apache Cassandra 4.0 GA release.&lt;/p&gt;

&lt;p&gt;This is an evolutionary change for Stargate more than a ground-breaking step. To bring the flexibility and ease of use that Stargate offers to as many developers as possible, we have always targeted multiple platforms (open source Apache Cassandra, Astra DB, and DataStax Enterprise) as well as multiple versions of Apache Cassandra (3.x and now 4.x). So you don’t need to worry about breaking changes or backwards compatibility. Stargate will continue to support these platforms and versions going forward.&lt;/p&gt;

&lt;p&gt;Features like improved internode messaging will benefit Stargate, but we don’t have to do anything in Stargate to receive those benefits; they’ll happen organically below the Stargate coordinator layer. Features like improved streaming offer new opportunities for streaming support in Stargate which we hope to take advantage of in the future. For now rest assured that new streaming features in Stargate will be planned to work with both 4.x and 3.x.&lt;/p&gt;

&lt;p&gt;The world’s most scalable open source database just got better. As a result, Stargate got better too.&lt;/p&gt;</content><author><name></name></author><summary type="html">Six years in the making, Apache Cassandra has reached its 4.0 GA release. This is a big milestone for one of the most important open source projects, and a significant step forward in the world of NoSQL and Fast Data.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blasting Off into Stargate using HTTPie</title><link href="https://stargate.io/2021/04/08/blasting-off-into-stargate-using-httpie.html" rel="alternate" type="text/html" title="Blasting Off into Stargate using HTTPie" /><published>2021-04-08T00:00:00+00:00</published><updated>2021-04-08T00:00:00+00:00</updated><id>https://stargate.io/2021/04/08/blasting-off-into-stargate-using-httpie</id><content type="html" xml:base="https://stargate.io/2021/04/08/blasting-off-into-stargate-using-httpie.html">&lt;p&gt;As a DataStax Developer Advocate, my job is to help our amazing teams provide you with the best possible experience with Cassandra and our products.&lt;/p&gt;

&lt;p&gt;Datastax &lt;a href=&quot;https://dtsx.io/workshop&quot;&gt;Astra&lt;/a&gt; is built on Apache Cassandra. In addition to great &lt;a href=&quot;https://docs.astra.datastax.com/docs&quot;&gt;documentation&lt;/a&gt;, Astra offers a robust free tier that can run small production workloads, pet projects, or just let you play—all for free, no credit card required. Cassandra can be tricky for hardcore SQL developers, because it uses a different slightly different query language (CQL), but when you get Astra, Stargate is there to let you interact with your data through APIs. Our open source &lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt; product provides REST, GraphQL, and schemaless document APIs in addition to native language drivers. If you like them but don’t want to use our products, that’s fine!  It’s completely open source and you can implement it on your own system.&lt;/p&gt;

&lt;p&gt;One of the things I noticed when I arrived at DataStax is that our tutorials rely heavily on curl for performing commands against our APIs. I prefer HTTPie, a similar tool designed for REST API interaction.So I created an authentication plugin for the HTTPie tool that stores your variables and lets you make requests like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyspaces&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve put together a &lt;a href=&quot;https://katacoda.com/datastax/scenarios/httpie-astra&quot;&gt;Katacoda scenario&lt;/a&gt; for you to see how everything works. If you want to implement it locally, here are the instructions:&lt;/p&gt;

&lt;p&gt;The first secret to this is an rc file (~/.astrarc), which keeps track of your DB, region, username, and password, and auto-refreshes your token. You can have as many sections in this file as works for you—it’s just an INI-style configuration file.&lt;/p&gt;

&lt;p&gt;The second secret is the HTTPie configuration file, in ~/.config/httpie/config.json&lt;/p&gt;

&lt;p&gt;My configuration is what you see here; I have the “fruity” color scheme, my default auth-type is astra, and the section of the .astrarc file is “default”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;default_options&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--style=fruity&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--auth-type=astra&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--auth=default:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My goal here is to make it so you can bounce around between REST and GraphQL queries, get nicely formatted JSON results, and perhaps use jq to pare them down—but mostly I want for the tool to get out of your way.&lt;/p&gt;

&lt;p&gt;Interested?  At this point httpie-astra requires python 3.5, but if you want me to make it support 2.7, please just let me know in the &lt;a href=&quot;https://community.datastax.com/index.html&quot;&gt;Datastax Community&lt;/a&gt; or on Discord.&lt;/p&gt;

&lt;p&gt;You can get it through github:
git clone https://synedra-datastax/httpie-astra&lt;/p&gt;

&lt;p&gt;Or with pip:
pip3 install httpie-astra&lt;/p&gt;

&lt;p&gt;Once you’ve got it installed, get your environment set up by making a simple call like:&lt;/p&gt;

&lt;p&gt;http –auth-type astra -a default: :/v2/schemas/keyspaces&lt;/p&gt;

&lt;p&gt;This will give you instructions to get all your variables set up.&lt;/p&gt;

&lt;p&gt;Let’s take a look at an example from our Astra REST documentation.&lt;/p&gt;

&lt;p&gt;The curl command looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-curl&quot; data-lang=&quot;curl&quot;&gt;curl --request GET \
--url https://${ASTRA_CLUSTER_ID}-${ASTRA_CLUSTER_REGION}.apps.astra.datastax.com/api/restv2/schemas/keyspaces/${ASTRA_DB_KEYSPACE}/tables/products
\
--header 'accept: application/json' \
--header 'x-cassandra-request-id: {unique-UUID}' \
--header &quot;x-cassandra-token: ${ASTRA_AUTHORIZATION_TOKEN}&quot;
```

Then it gives you back a single line JSON doc.

```
{&quot;data&quot;:{&quot;name&quot;:&quot;products&quot;,&quot;keyspace&quot;:&quot;tutorial&quot;,&quot;columnDefinitions&quot;:[{&quot;name&quot;:&quot;id&quot;,&quot;typeDefinition&quot;:&quot;uuid&quot;,&quot;static&quot;:false},{&quot;name&quot;:&quot;created&quot;,&quot;typeDefinition&quot;:&quot;timestamp&quot;,&quot;static&quot;:false},{&quot;name&quot;:&quot;description&quot;,&quot;typeDefinition&quot;:&quot;varchar&quot;,&quot;static&quot;:false},{&quot;name&quot;:&quot;name&quot;,&quot;typeDefinition&quot;:&quot;varchar&quot;,&quot;static&quot;:false},{&quot;name&quot;:&quot;price&quot;,&quot;typeDefinition&quot;:&quot;decimal&quot;,&quot;static&quot;:false}],&quot;primaryKey&quot;:{&quot;partitionKey&quot;:[&quot;id&quot;],&quot;clusteringKey&quot;:[]},&quot;tableOptions&quot;:{&quot;defaultTimeToLive&quot;:0,&quot;clusteringExpression&quot;:[]}}}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The httpie command already knows a lot of this information, so the call is much simpler. I’m using the config.json I described above to set my auth-type and config section. I’ll show this output as a screen shot because it’s really easy to understand:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blasting-off-into-stargate-using-httpie/httpie.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re on the job, getting the Stargate examples and Astra API examples to include HTTPie tabs, but in the meantime if you’re having fun with this, please let me know in the community or discord, and let’s make this rock for you!&lt;/p&gt;</content><author><name></name></author><summary type="html">As a DataStax Developer Advocate, my job is to help our amazing teams provide you with the best possible experience with Cassandra and our products.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Stargate Documents API: Storage mechanisms, search filters, and performance improvements</title><link href="https://stargate.io/2021/04/05/the-stargate-documents-api-storage-mechanisms-search-filters-and-performance-improvements.html" rel="alternate" type="text/html" title="The Stargate Documents API: Storage mechanisms, search filters, and performance improvements" /><published>2021-04-05T00:00:00+00:00</published><updated>2021-04-05T00:00:00+00:00</updated><id>https://stargate.io/2021/04/05/the-stargate-documents-api-storage-mechanisms-search-filters-and-performance-improvements</id><content type="html" xml:base="https://stargate.io/2021/04/05/the-stargate-documents-api-storage-mechanisms-search-filters-and-performance-improvements.html">&lt;p&gt;The Stargate Documents API has made great strides in the past few months. After being introduced as open-source software in late 2020, its development has accelerated quickly. I’m here to give you the rundown: the premises on which we built it, the limitations we’ve faced and worked through, and most importantly, the improvements we have made as a community in the past few months. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-documents-api&quot;&gt;What is the Documents API?&lt;/h2&gt;
&lt;p&gt;The Documents API is a part of &lt;a href=&quot;https://stargate.io/&quot;&gt;Stargate&lt;/a&gt; that enables a user to create, get, modify, delete, and search JSON documents in a collection, all backed by the power and robustness of Apache Cassandra. For the uninitiated, this might seem a little bit like fantasy. An API that facilitates working with JSON documents against a storage database that enforces a schema seems like a bridge between two different worlds, but that is exactly what Stargate is! At its core, the Documents API abstracts away the complexities of converting JSON documents into tabular form and back again, so from a user’s perspective, they only work with JSON over HTTP at any given point.&lt;/p&gt;

&lt;p&gt;One of the use-cases that the Documents API is perfect for is rapid iteration. Creating an application quickly, making a bunch of changes, and still being able to store documents in whatever form you desire without any lock-in to a schema is a very potent pattern that is used by agile organizations. Not having to define a schema before storing data is incredibly powerful for this purpose. And because it’s built on Cassandra, there will be pathways in the future to migrate to having a defined schema, when your application has settled on a format for its various data.&lt;/p&gt;

&lt;p&gt;There are three main benefits to creating a free-form document API against Cassandra in particular:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Convenience&lt;/strong&gt;: Perhaps you want to start collecting and storing (and searching!) data without knowing precisely what schema it might conform to. Maybe you have such free-form data that you don’t want to require a schema so early in development.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Other document stores scale up pretty far, but Cassandra is well-known as the database of greatest scale, being able to theoretically scale infinitely with infinite resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: While other document stores do have this to some degree, Cassandra has a distributed node infrastructure that ensures that data is never lost, and also that downtime is virtually never experienced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to create the Documents API with these three main benefits in mind, we first had to devise a reasonable method of storage of JSON documents. Because the end user does not interact with the Cassandra schema directly, it is up to the API to decide upon and maintain the schema as-is. We decided to do what we describe as “shredding” the JSON document, in order to get it into a form that can easily be stored in Cassandra. This process of shredding can be shown by example; a JSON blob such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nested&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;can be turned into a form where there is one row per &lt;em&gt;value&lt;/em&gt; in the JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the shredding process, and the data gets stored in a table with a name of the user’s choosing (from their perspective it is called a &lt;strong&gt;collection&lt;/strong&gt;) with a schema as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key text&lt;/th&gt;
      &lt;th&gt;p0 text&lt;/th&gt;
      &lt;th&gt;p1 text&lt;/th&gt;
      &lt;th&gt;p2 text&lt;/th&gt;
      &lt;th&gt;p3 text&lt;/th&gt;
      &lt;th&gt;…&lt;/th&gt;
      &lt;th&gt;pmax text&lt;/th&gt;
      &lt;th&gt;dbl_value double&lt;/th&gt;
      &lt;th&gt;text_value text&lt;/th&gt;
      &lt;th&gt;bool_value boolean&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;docname&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;key&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;docname&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;nested&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;key1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;docname&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;[0]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;docname&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;[1]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;docname&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;[2]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Because Cassandra’s storage format stores rows in a “sparse” format–that is, it only stores the value of non-null columns–this is an efficient way to store document data.  And writing this data is actually quite simple, as all we have to do is iterate through every value in the JSON and determine its path; we then write the document in a single batch to Cassandra. On the flip side, reading a document based on its key (the name of the document) is quite easy as well: just get all of the rows that match the document key, and assemble them back into JSON to return to the client.&lt;/p&gt;

&lt;p&gt;One other benefit of this shredding method is that the user can ask for a path within the JSON, such as “what is the value of b.nested?” and it is quite easy to just query for that value and return that relevant row. For those who know Cassandra, note that key is the Partition Key, and p0 through pmax (by default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; is 63) are part of a compound Clustering Key. This is the storage schema that is created on the fly when you create your first document in a new collection. Stargate manages that creation and maintenance of the Cassandra schema so that you don’t have to!&lt;/p&gt;

&lt;h2 id=&quot;search-filters&quot;&gt;Search filters&lt;/h2&gt;
&lt;p&gt;There are two different search functions that are available with the documents API. You can search within the document for all of the paths that match a predicate, which is perfect for larger documents, and you can search for documents that match a predicate in an entire collection. Both of these search functions allow a set of filters, which are used by sending JSON as a query parameter. The allowed filters are: $eq, $gt, $gte, $lt, $lte, $exists, $ne, $in, and $nin. If multiple filters are supplied, they are executed using AND, since OR is not yet supported natively by CQL.&lt;/p&gt;

&lt;p&gt;There is a bit of subtlety with these filters, however. Some filters ($eq, $gt(e), $lt(e), $exists) translate directly into CQL and therefore can do their filtering in Cassandra, which is fast and efficient on the whole, but the rest ($ne, $in, and $nin) are not natively supported by Cassandra. In order to bridge this gap, we deemed these filters “limited-support” filters, and gave them the following restrictions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data will be fetched from Cassandra &lt;em&gt;unfiltered&lt;/em&gt; in pages, and as those pages come out the relevant limited-support filters will be applied &lt;em&gt;in-memory&lt;/em&gt; on the coordinator node (where Stargate runs).&lt;/li&gt;
  &lt;li&gt;For a search within a document, the result set must fit within a single Cassandra page. This essentially means that the page-size you request with has to be sufficiently low.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result of the above, it is expected that limited-support filters perform poorly for cases where either you are searching for a small set of results within a large document, or if you are searching for a small number of documents in a large collection. Also, if you are using multiple filters (regardless of whether they are limited-support), you will observe a similar performance pattern as of version 1.0.16.&lt;/p&gt;

&lt;p&gt;DataStax has published a Cassandra Enhancement Proposal to bring its &lt;a href=&quot;https://www.datastax.com/blog/eliminate-trade-offs-between-database-ease-use-and-massive-scale-sai-storage-attached&quot;&gt;Storage-Attached Indexing technology&lt;/a&gt; to Cassandra, which will allow more efficient native indexing of this type of filter.&lt;/p&gt;

&lt;h2 id=&quot;improvements-past-and-planned&quot;&gt;Improvements, past and planned&lt;/h2&gt;
&lt;p&gt;The Documents API was in beta in late 2020 and had its first major version released at the end of 2020. As such, there was and still is a lot to improve upon!&lt;/p&gt;

&lt;p&gt;The very first issue that was seen after release was an issue of performance. Initial benchmarks showed that against a Cassandra cluster with 2 Stargate nodes and 2 Storage nodes the average latency for reads (under high concurrency) was 40 milliseconds. While not terrible, a great deal of JVM profiling was done to determine where exactly the time was being spent. It was determined that the authentication process was the culprit, as it attempts to read from (and in some cases write to) an internal table each time the user authenticates.&lt;/p&gt;

&lt;p&gt;By keeping this data in a short-lived cache, we could avoid the performance penalty associated with auth. The next thing we noticed was that our endpoints were not utilizing asynchronous execution in quite the manner we wanted. By adding async at the highest level of the HTTP service, we were able to get some performance gains on both read and write. After these two major changes, we began to see average read latencies of between 12 and 18 milliseconds, depending on the version of Cassandra that was being used. Not only that, these changes affected the write path as well, so this change of between 2x-3x was observed for creating and updating documents as well. Not a bad first stab, and there is still more to come!&lt;/p&gt;

&lt;p&gt;Another optimization that was made since release was to the “search across collections” functionality. In earlier versions, if you searched across a collection with any filters, you would end up filtering in memory, in the inefficient manner described above. This meant that if you had a table with a million documents that had 10 fields each, a simple $eq filter that matched only a few results would take &lt;em&gt;minutes&lt;/em&gt; to complete, or time out entirely. A change was made in v1.0.13 that improved the performance in this particular case by querying Cassandra; now that same process takes on the scale of 100 milliseconds. There is still more room for optimization there, which is very promising.&lt;/p&gt;

&lt;p&gt;For the future, we are looking into ways to support OR queries, and also ways to use Cassandra for more of these multi-filter AND queries, which would likely improve performance by a ton. As this progresses, we will be benchmark testing at every step to see what kinds of performance improvements we are getting. All in all, I’m very excited to see what future the Document API holds—there is a lot of potential room for improvement, and we are just getting started!&lt;/p&gt;

&lt;p&gt;If you would like to contribute to the Documents API or to Stargate in any part, all contributions are welcome. Please go to our GitHub repository: &lt;a href=&quot;https://github.com/stargate/stargate&quot;&gt;https://github.com/stargate/stargate&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">The Stargate Documents API has made great strides in the past few months. After being introduced as open-source software in late 2020, its development has accelerated quickly. I’m here to give you the rundown: the premises on which we built it, the limitations we’ve faced and worked through, and most importantly, the improvements we have made as a community in the past few months. Let’s get started!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Turbocharge App Development on DSE with Stargate Support for Modern Data APIs</title><link href="https://stargate.io/2021/02/10/turbocharge-app-development-on-dse-with-stargate-support-for-modern-data-apis.html" rel="alternate" type="text/html" title="Turbocharge App Development on DSE with Stargate Support for Modern Data APIs" /><published>2021-02-10T00:00:00+00:00</published><updated>2021-02-10T00:00:00+00:00</updated><id>https://stargate.io/2021/02/10/turbocharge-app-development-on-dse-with-stargate-support-for-modern-data-apis</id><content type="html" xml:base="https://stargate.io/2021/02/10/turbocharge-app-development-on-dse-with-stargate-support-for-modern-data-apis.html">&lt;p&gt;It’s a monumental day for &lt;a href=&quot;https://www.datastax.com/products/datastax-enterprise&quot;&gt;DataStax Enterprise&lt;/a&gt; (DSE) users: &lt;a href=&quot;http://www.stargate.io&quot;&gt;Stargate&lt;/a&gt; support for DSE is here! This means that you can now use REST, GraphQL, and schemaless Document APIs in addition to CQL when building your applications on top of DSE. These APIs are available for use with DSE 6.8.&lt;/p&gt;

&lt;h2 id=&quot;whats-stargate&quot;&gt;What’s Stargate?&lt;/h2&gt;
&lt;p&gt;Stargate is an open source data gateway with built-in extensibility. It allows you to integrate APIs of your choice with any persistence layer. It provides this ability with two components: API services and persistence services. What this means is you can create APIs to connect with various persistence stores, such as DSE.&lt;/p&gt;

&lt;h2 id=&quot;stargate-with-dse&quot;&gt;Stargate with DSE&lt;/h2&gt;
&lt;p&gt;With this release, Stargate supports DSE 6.8 as one of these pluggable persistence stores. In order to run Stargate, users will need to add additional nodes to their cluster. These nodes will behave as coordinators in the cluster and no data will be stored on them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/turbocharge-app-development-on-dse-with-stargate-support-for-modern-data-apis/stargate-dse-integration-example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-do-enterprises-need-stargate&quot;&gt;Why Do Enterprises Need Stargate?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Modern developers need schemaless data.&lt;/strong&gt; Building an app and then continuing to iterate is a critical part of accelerating time to market. For too long, developers and DBAs have had to predefine the schema before writing their first line of code. Adding a new field (for a phone number, for example), required an ‘ALTER TABLE’ command, costing even more time. With Stargat`e, Document-based development can use schemaless JSON without the need for defining and modifying schemas during the development life cycle. Your application can now evolve as fast as your customers’ needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modern apps need modern data APIs.&lt;/strong&gt; Exchanging data with simple, easy-to-use APIs is a fundamental characteristic of modern data apps. Gone are the days of custom or vendor-specific APIs, many of which don’t work with popular new languages and frameworks such as Java, Python, React, and Spring. GraphQL API usage has doubled annually for the last 5 years (&lt;a href=&quot;https://2020.stateofjs.com/en-US/technologies/datalayer/&quot;&gt;50%&lt;/a&gt; of developers say they are or will be using GraphQL). And REST is still the gold standard as &lt;a href=&quot;https://rapidapi.com/blog/rapidapi-developer-survey-insights/&quot;&gt;63%&lt;/a&gt; of all APIs are using REST. Stargate is aligned with building modern apps; it provides REST, Document (JSON) and GraphQL APIs to help developers create applications using the languages and frameworks they know best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modern architecture needs microservices.&lt;/strong&gt; Cloud-native applications are predominantly built using a microservices architecture and run via Kubernetes. Stargate was designed with this in mind. It abstracts away backends, enabling developers and architects to focus on interacting with data using modern APIs, and not on specific database implementations. Developers have the freedom to use what languages they know and what fits their requirements to build microservices. These are necessary elements for reducing the friction to build innovative cloud native applications. And by leveraging Kubernetes, Stargate mitigates some of the hurdles associated with a microservices architecture like scalability and resiliency.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“At Yelp, we are excited about Stargate’s vision to be an open-source and cloud-native data access API gateway. We already heavily rely on the reliability and resilience of Cassandra to handle big workloads with zero downtime. Therefore, the ability to abstract Cassandra-specific concepts entirely from app developers and support different API options — like REST, GraphQL and gRPC — will go a long way in removing barriers of entry for new software developers at Yelp.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— &lt;a href=&quot;https://www.linkedin.com/in/sirishavanteru/&quot;&gt;Sirisha Vanteru&lt;/a&gt;, Engineering Manager, Yelp&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Our team is focused on implementing technology that empowers our customers to innovate and invest for a better future. Currently, it is hard to lift and shift our older driver versions in our data infrastructure. Using Stargate’s REST API platform would simplify this and allow us to build modern apps with ease. We are excited to see how we can modernize our architecture with Stargate in Astra.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— &lt;a href=&quot;https://www.linkedin.com/in/jon-lau-10a81363/&quot;&gt;Jon Lau&lt;/a&gt;, Cassandra DB Platform Owner,  Engineer, Macquarie Group&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How To Get Started&lt;/h2&gt;
&lt;p&gt;Follow our documentation &lt;a href=&quot;https://stargate.io/docs/stargate/1.0/developers-guide/install/install_dse_68.html&quot;&gt;here&lt;/a&gt; to get started with Stargate. If you’d like to learn more and see how Stargate exposes these endpoints and integrates with DSE, take a look at this &lt;a href=&quot;https://stargate.io/2020/09/14/init-stargate.html&quot;&gt;blog post&lt;/a&gt; and the &lt;a href=&quot;https://github.com/stargate/stargate&quot;&gt;Stargate&lt;/a&gt; source code for a deeper dive. The blog post does a great job of explaining the mechanics of Stargate and you can always dig into the code for a more thorough analysis.&lt;/p&gt;

&lt;p&gt;Get started today! &lt;a href=&quot;https://downloads.datastax.com/#stargate&quot;&gt;Download Stargate&lt;/a&gt; and &lt;a href=&quot;https://www.datastax.com/resources/webinar/create-new-apps-faster-worlds-most-proven-nosql-database-nam&quot;&gt;sign up for our upcoming webinar&lt;/a&gt;!&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s a monumental day for DataStax Enterprise (DSE) users: Stargate support for DSE is here! This means that you can now use REST, GraphQL, and schemaless Document APIs in addition to CQL when building your applications on top of DSE. These APIs are available for use with DSE 6.8.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stargate.io/assets/images/default-stargate.png" /><media:content medium="image" url="https://stargate.io/assets/images/default-stargate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>